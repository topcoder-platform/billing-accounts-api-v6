
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model BillingAccount
 * 
 */
export type BillingAccount = $Result.DefaultSelection<Prisma.$BillingAccountPayload>
/**
 * Model LockedAmount
 * 
 */
export type LockedAmount = $Result.DefaultSelection<Prisma.$LockedAmountPayload>
/**
 * Model ConsumedAmount
 * 
 */
export type ConsumedAmount = $Result.DefaultSelection<Prisma.$ConsumedAmountPayload>
/**
 * Model BillingAccountAccess
 * 
 */
export type BillingAccountAccess = $Result.DefaultSelection<Prisma.$BillingAccountAccessPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ClientStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type ClientStatus = (typeof ClientStatus)[keyof typeof ClientStatus]


export const BAStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type BAStatus = (typeof BAStatus)[keyof typeof BAStatus]

}

export type ClientStatus = $Enums.ClientStatus

export const ClientStatus: typeof $Enums.ClientStatus

export type BAStatus = $Enums.BAStatus

export const BAStatus: typeof $Enums.BAStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.billingAccount`: Exposes CRUD operations for the **BillingAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingAccounts
    * const billingAccounts = await prisma.billingAccount.findMany()
    * ```
    */
  get billingAccount(): Prisma.BillingAccountDelegate<ExtArgs>;

  /**
   * `prisma.lockedAmount`: Exposes CRUD operations for the **LockedAmount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LockedAmounts
    * const lockedAmounts = await prisma.lockedAmount.findMany()
    * ```
    */
  get lockedAmount(): Prisma.LockedAmountDelegate<ExtArgs>;

  /**
   * `prisma.consumedAmount`: Exposes CRUD operations for the **ConsumedAmount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsumedAmounts
    * const consumedAmounts = await prisma.consumedAmount.findMany()
    * ```
    */
  get consumedAmount(): Prisma.ConsumedAmountDelegate<ExtArgs>;

  /**
   * `prisma.billingAccountAccess`: Exposes CRUD operations for the **BillingAccountAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingAccountAccesses
    * const billingAccountAccesses = await prisma.billingAccountAccess.findMany()
    * ```
    */
  get billingAccountAccess(): Prisma.BillingAccountAccessDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Client: 'Client',
    BillingAccount: 'BillingAccount',
    LockedAmount: 'LockedAmount',
    ConsumedAmount: 'ConsumedAmount',
    BillingAccountAccess: 'BillingAccountAccess'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "client" | "billingAccount" | "lockedAmount" | "consumedAmount" | "billingAccountAccess"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      BillingAccount: {
        payload: Prisma.$BillingAccountPayload<ExtArgs>
        fields: Prisma.BillingAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>
          }
          findFirst: {
            args: Prisma.BillingAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>
          }
          findMany: {
            args: Prisma.BillingAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>[]
          }
          create: {
            args: Prisma.BillingAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>
          }
          createMany: {
            args: Prisma.BillingAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>[]
          }
          delete: {
            args: Prisma.BillingAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>
          }
          update: {
            args: Prisma.BillingAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>
          }
          deleteMany: {
            args: Prisma.BillingAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountPayload>
          }
          aggregate: {
            args: Prisma.BillingAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingAccount>
          }
          groupBy: {
            args: Prisma.BillingAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingAccountCountArgs<ExtArgs>
            result: $Utils.Optional<BillingAccountCountAggregateOutputType> | number
          }
        }
      }
      LockedAmount: {
        payload: Prisma.$LockedAmountPayload<ExtArgs>
        fields: Prisma.LockedAmountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LockedAmountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LockedAmountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>
          }
          findFirst: {
            args: Prisma.LockedAmountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LockedAmountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>
          }
          findMany: {
            args: Prisma.LockedAmountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>[]
          }
          create: {
            args: Prisma.LockedAmountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>
          }
          createMany: {
            args: Prisma.LockedAmountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LockedAmountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>[]
          }
          delete: {
            args: Prisma.LockedAmountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>
          }
          update: {
            args: Prisma.LockedAmountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>
          }
          deleteMany: {
            args: Prisma.LockedAmountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LockedAmountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LockedAmountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedAmountPayload>
          }
          aggregate: {
            args: Prisma.LockedAmountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLockedAmount>
          }
          groupBy: {
            args: Prisma.LockedAmountGroupByArgs<ExtArgs>
            result: $Utils.Optional<LockedAmountGroupByOutputType>[]
          }
          count: {
            args: Prisma.LockedAmountCountArgs<ExtArgs>
            result: $Utils.Optional<LockedAmountCountAggregateOutputType> | number
          }
        }
      }
      ConsumedAmount: {
        payload: Prisma.$ConsumedAmountPayload<ExtArgs>
        fields: Prisma.ConsumedAmountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumedAmountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumedAmountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>
          }
          findFirst: {
            args: Prisma.ConsumedAmountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumedAmountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>
          }
          findMany: {
            args: Prisma.ConsumedAmountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>[]
          }
          create: {
            args: Prisma.ConsumedAmountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>
          }
          createMany: {
            args: Prisma.ConsumedAmountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumedAmountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>[]
          }
          delete: {
            args: Prisma.ConsumedAmountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>
          }
          update: {
            args: Prisma.ConsumedAmountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>
          }
          deleteMany: {
            args: Prisma.ConsumedAmountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumedAmountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsumedAmountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumedAmountPayload>
          }
          aggregate: {
            args: Prisma.ConsumedAmountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumedAmount>
          }
          groupBy: {
            args: Prisma.ConsumedAmountGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumedAmountGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumedAmountCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumedAmountCountAggregateOutputType> | number
          }
        }
      }
      BillingAccountAccess: {
        payload: Prisma.$BillingAccountAccessPayload<ExtArgs>
        fields: Prisma.BillingAccountAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingAccountAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingAccountAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>
          }
          findFirst: {
            args: Prisma.BillingAccountAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingAccountAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>
          }
          findMany: {
            args: Prisma.BillingAccountAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>[]
          }
          create: {
            args: Prisma.BillingAccountAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>
          }
          createMany: {
            args: Prisma.BillingAccountAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingAccountAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>[]
          }
          delete: {
            args: Prisma.BillingAccountAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>
          }
          update: {
            args: Prisma.BillingAccountAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>
          }
          deleteMany: {
            args: Prisma.BillingAccountAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingAccountAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingAccountAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingAccountAccessPayload>
          }
          aggregate: {
            args: Prisma.BillingAccountAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingAccountAccess>
          }
          groupBy: {
            args: Prisma.BillingAccountAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingAccountAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingAccountAccessCountArgs<ExtArgs>
            result: $Utils.Optional<BillingAccountAccessCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    billingAccounts: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccounts?: boolean | ClientCountOutputTypeCountBillingAccountsArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountBillingAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingAccountWhereInput
  }


  /**
   * Count Type BillingAccountCountOutputType
   */

  export type BillingAccountCountOutputType = {
    lockedAmounts: number
    consumedAmounts: number
    accessGrants: number
  }

  export type BillingAccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lockedAmounts?: boolean | BillingAccountCountOutputTypeCountLockedAmountsArgs
    consumedAmounts?: boolean | BillingAccountCountOutputTypeCountConsumedAmountsArgs
    accessGrants?: boolean | BillingAccountCountOutputTypeCountAccessGrantsArgs
  }

  // Custom InputTypes
  /**
   * BillingAccountCountOutputType without action
   */
  export type BillingAccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountCountOutputType
     */
    select?: BillingAccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BillingAccountCountOutputType without action
   */
  export type BillingAccountCountOutputTypeCountLockedAmountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LockedAmountWhereInput
  }

  /**
   * BillingAccountCountOutputType without action
   */
  export type BillingAccountCountOutputTypeCountConsumedAmountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedAmountWhereInput
  }

  /**
   * BillingAccountCountOutputType without action
   */
  export type BillingAccountCountOutputTypeCountAccessGrantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingAccountAccessWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    name: string | null
    codeName: string | null
    status: $Enums.ClientStatus | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    codeName: string | null
    status: $Enums.ClientStatus | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    codeName: number
    status: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    codeName?: true
    status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    codeName?: true
    status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    codeName?: true
    status?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    name: string
    codeName: string | null
    status: $Enums.ClientStatus
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    codeName?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingAccounts?: boolean | Client$billingAccountsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    codeName?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    codeName?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccounts?: boolean | Client$billingAccountsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      billingAccounts: Prisma.$BillingAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      codeName: string | null
      status: $Enums.ClientStatus
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billingAccounts<T extends Client$billingAccountsArgs<ExtArgs> = {}>(args?: Subset<T, Client$billingAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly name: FieldRef<"Client", 'String'>
    readonly codeName: FieldRef<"Client", 'String'>
    readonly status: FieldRef<"Client", 'ClientStatus'>
    readonly startDate: FieldRef<"Client", 'DateTime'>
    readonly endDate: FieldRef<"Client", 'DateTime'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }

  /**
   * Client.billingAccounts
   */
  export type Client$billingAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    where?: BillingAccountWhereInput
    orderBy?: BillingAccountOrderByWithRelationInput | BillingAccountOrderByWithRelationInput[]
    cursor?: BillingAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingAccountScalarFieldEnum | BillingAccountScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model BillingAccount
   */

  export type AggregateBillingAccount = {
    _count: BillingAccountCountAggregateOutputType | null
    _avg: BillingAccountAvgAggregateOutputType | null
    _sum: BillingAccountSumAggregateOutputType | null
    _min: BillingAccountMinAggregateOutputType | null
    _max: BillingAccountMaxAggregateOutputType | null
  }

  export type BillingAccountAvgAggregateOutputType = {
    budget: Decimal | null
    markup: Decimal | null
    salesTax: Decimal | null
  }

  export type BillingAccountSumAggregateOutputType = {
    budget: Decimal | null
    markup: Decimal | null
    salesTax: Decimal | null
  }

  export type BillingAccountMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    name: string | null
    description: string | null
    status: $Enums.BAStatus | null
    startDate: Date | null
    endDate: Date | null
    budget: Decimal | null
    markup: Decimal | null
    clientId: string | null
    poNumber: string | null
    subscriptionNumber: string | null
    isManualPrize: boolean | null
    paymentTerms: string | null
    salesTax: Decimal | null
    billable: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingAccountMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    name: string | null
    description: string | null
    status: $Enums.BAStatus | null
    startDate: Date | null
    endDate: Date | null
    budget: Decimal | null
    markup: Decimal | null
    clientId: string | null
    poNumber: string | null
    subscriptionNumber: string | null
    isManualPrize: boolean | null
    paymentTerms: string | null
    salesTax: Decimal | null
    billable: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingAccountCountAggregateOutputType = {
    id: number
    projectId: number
    name: number
    description: number
    status: number
    startDate: number
    endDate: number
    budget: number
    markup: number
    clientId: number
    poNumber: number
    subscriptionNumber: number
    isManualPrize: number
    paymentTerms: number
    salesTax: number
    billable: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BillingAccountAvgAggregateInputType = {
    budget?: true
    markup?: true
    salesTax?: true
  }

  export type BillingAccountSumAggregateInputType = {
    budget?: true
    markup?: true
    salesTax?: true
  }

  export type BillingAccountMinAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    budget?: true
    markup?: true
    clientId?: true
    poNumber?: true
    subscriptionNumber?: true
    isManualPrize?: true
    paymentTerms?: true
    salesTax?: true
    billable?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingAccountMaxAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    budget?: true
    markup?: true
    clientId?: true
    poNumber?: true
    subscriptionNumber?: true
    isManualPrize?: true
    paymentTerms?: true
    salesTax?: true
    billable?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingAccountCountAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    endDate?: true
    budget?: true
    markup?: true
    clientId?: true
    poNumber?: true
    subscriptionNumber?: true
    isManualPrize?: true
    paymentTerms?: true
    salesTax?: true
    billable?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BillingAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingAccount to aggregate.
     */
    where?: BillingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccounts to fetch.
     */
    orderBy?: BillingAccountOrderByWithRelationInput | BillingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingAccounts
    **/
    _count?: true | BillingAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingAccountMaxAggregateInputType
  }

  export type GetBillingAccountAggregateType<T extends BillingAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingAccount[P]>
      : GetScalarType<T[P], AggregateBillingAccount[P]>
  }




  export type BillingAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingAccountWhereInput
    orderBy?: BillingAccountOrderByWithAggregationInput | BillingAccountOrderByWithAggregationInput[]
    by: BillingAccountScalarFieldEnum[] | BillingAccountScalarFieldEnum
    having?: BillingAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingAccountCountAggregateInputType | true
    _avg?: BillingAccountAvgAggregateInputType
    _sum?: BillingAccountSumAggregateInputType
    _min?: BillingAccountMinAggregateInputType
    _max?: BillingAccountMaxAggregateInputType
  }

  export type BillingAccountGroupByOutputType = {
    id: string
    projectId: string | null
    name: string
    description: string | null
    status: $Enums.BAStatus
    startDate: Date | null
    endDate: Date | null
    budget: Decimal
    markup: Decimal
    clientId: string
    poNumber: string | null
    subscriptionNumber: string | null
    isManualPrize: boolean
    paymentTerms: string | null
    salesTax: Decimal | null
    billable: boolean
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: BillingAccountCountAggregateOutputType | null
    _avg: BillingAccountAvgAggregateOutputType | null
    _sum: BillingAccountSumAggregateOutputType | null
    _min: BillingAccountMinAggregateOutputType | null
    _max: BillingAccountMaxAggregateOutputType | null
  }

  type GetBillingAccountGroupByPayload<T extends BillingAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingAccountGroupByOutputType[P]>
            : GetScalarType<T[P], BillingAccountGroupByOutputType[P]>
        }
      >
    >


  export type BillingAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    markup?: boolean
    clientId?: boolean
    poNumber?: boolean
    subscriptionNumber?: boolean
    isManualPrize?: boolean
    paymentTerms?: boolean
    salesTax?: boolean
    billable?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    lockedAmounts?: boolean | BillingAccount$lockedAmountsArgs<ExtArgs>
    consumedAmounts?: boolean | BillingAccount$consumedAmountsArgs<ExtArgs>
    accessGrants?: boolean | BillingAccount$accessGrantsArgs<ExtArgs>
    _count?: boolean | BillingAccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingAccount"]>

  export type BillingAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    markup?: boolean
    clientId?: boolean
    poNumber?: boolean
    subscriptionNumber?: boolean
    isManualPrize?: boolean
    paymentTerms?: boolean
    salesTax?: boolean
    billable?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingAccount"]>

  export type BillingAccountSelectScalar = {
    id?: boolean
    projectId?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    budget?: boolean
    markup?: boolean
    clientId?: boolean
    poNumber?: boolean
    subscriptionNumber?: boolean
    isManualPrize?: boolean
    paymentTerms?: boolean
    salesTax?: boolean
    billable?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BillingAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    lockedAmounts?: boolean | BillingAccount$lockedAmountsArgs<ExtArgs>
    consumedAmounts?: boolean | BillingAccount$consumedAmountsArgs<ExtArgs>
    accessGrants?: boolean | BillingAccount$accessGrantsArgs<ExtArgs>
    _count?: boolean | BillingAccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BillingAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $BillingAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingAccount"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      lockedAmounts: Prisma.$LockedAmountPayload<ExtArgs>[]
      consumedAmounts: Prisma.$ConsumedAmountPayload<ExtArgs>[]
      accessGrants: Prisma.$BillingAccountAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string | null
      name: string
      description: string | null
      status: $Enums.BAStatus
      startDate: Date | null
      endDate: Date | null
      budget: Prisma.Decimal
      markup: Prisma.Decimal
      clientId: string
      poNumber: string | null
      subscriptionNumber: string | null
      isManualPrize: boolean
      paymentTerms: string | null
      salesTax: Prisma.Decimal | null
      billable: boolean
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["billingAccount"]>
    composites: {}
  }

  type BillingAccountGetPayload<S extends boolean | null | undefined | BillingAccountDefaultArgs> = $Result.GetResult<Prisma.$BillingAccountPayload, S>

  type BillingAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillingAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillingAccountCountAggregateInputType | true
    }

  export interface BillingAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingAccount'], meta: { name: 'BillingAccount' } }
    /**
     * Find zero or one BillingAccount that matches the filter.
     * @param {BillingAccountFindUniqueArgs} args - Arguments to find a BillingAccount
     * @example
     * // Get one BillingAccount
     * const billingAccount = await prisma.billingAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingAccountFindUniqueArgs>(args: SelectSubset<T, BillingAccountFindUniqueArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BillingAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillingAccountFindUniqueOrThrowArgs} args - Arguments to find a BillingAccount
     * @example
     * // Get one BillingAccount
     * const billingAccount = await prisma.billingAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BillingAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountFindFirstArgs} args - Arguments to find a BillingAccount
     * @example
     * // Get one BillingAccount
     * const billingAccount = await prisma.billingAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingAccountFindFirstArgs>(args?: SelectSubset<T, BillingAccountFindFirstArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BillingAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountFindFirstOrThrowArgs} args - Arguments to find a BillingAccount
     * @example
     * // Get one BillingAccount
     * const billingAccount = await prisma.billingAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BillingAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingAccounts
     * const billingAccounts = await prisma.billingAccount.findMany()
     * 
     * // Get first 10 BillingAccounts
     * const billingAccounts = await prisma.billingAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingAccountWithIdOnly = await prisma.billingAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingAccountFindManyArgs>(args?: SelectSubset<T, BillingAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BillingAccount.
     * @param {BillingAccountCreateArgs} args - Arguments to create a BillingAccount.
     * @example
     * // Create one BillingAccount
     * const BillingAccount = await prisma.billingAccount.create({
     *   data: {
     *     // ... data to create a BillingAccount
     *   }
     * })
     * 
     */
    create<T extends BillingAccountCreateArgs>(args: SelectSubset<T, BillingAccountCreateArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BillingAccounts.
     * @param {BillingAccountCreateManyArgs} args - Arguments to create many BillingAccounts.
     * @example
     * // Create many BillingAccounts
     * const billingAccount = await prisma.billingAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingAccountCreateManyArgs>(args?: SelectSubset<T, BillingAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillingAccounts and returns the data saved in the database.
     * @param {BillingAccountCreateManyAndReturnArgs} args - Arguments to create many BillingAccounts.
     * @example
     * // Create many BillingAccounts
     * const billingAccount = await prisma.billingAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillingAccounts and only return the `id`
     * const billingAccountWithIdOnly = await prisma.billingAccount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BillingAccount.
     * @param {BillingAccountDeleteArgs} args - Arguments to delete one BillingAccount.
     * @example
     * // Delete one BillingAccount
     * const BillingAccount = await prisma.billingAccount.delete({
     *   where: {
     *     // ... filter to delete one BillingAccount
     *   }
     * })
     * 
     */
    delete<T extends BillingAccountDeleteArgs>(args: SelectSubset<T, BillingAccountDeleteArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BillingAccount.
     * @param {BillingAccountUpdateArgs} args - Arguments to update one BillingAccount.
     * @example
     * // Update one BillingAccount
     * const billingAccount = await prisma.billingAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingAccountUpdateArgs>(args: SelectSubset<T, BillingAccountUpdateArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BillingAccounts.
     * @param {BillingAccountDeleteManyArgs} args - Arguments to filter BillingAccounts to delete.
     * @example
     * // Delete a few BillingAccounts
     * const { count } = await prisma.billingAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingAccountDeleteManyArgs>(args?: SelectSubset<T, BillingAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingAccounts
     * const billingAccount = await prisma.billingAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingAccountUpdateManyArgs>(args: SelectSubset<T, BillingAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BillingAccount.
     * @param {BillingAccountUpsertArgs} args - Arguments to update or create a BillingAccount.
     * @example
     * // Update or create a BillingAccount
     * const billingAccount = await prisma.billingAccount.upsert({
     *   create: {
     *     // ... data to create a BillingAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingAccount we want to update
     *   }
     * })
     */
    upsert<T extends BillingAccountUpsertArgs>(args: SelectSubset<T, BillingAccountUpsertArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BillingAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountCountArgs} args - Arguments to filter BillingAccounts to count.
     * @example
     * // Count the number of BillingAccounts
     * const count = await prisma.billingAccount.count({
     *   where: {
     *     // ... the filter for the BillingAccounts we want to count
     *   }
     * })
    **/
    count<T extends BillingAccountCountArgs>(
      args?: Subset<T, BillingAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingAccountAggregateArgs>(args: Subset<T, BillingAccountAggregateArgs>): Prisma.PrismaPromise<GetBillingAccountAggregateType<T>>

    /**
     * Group by BillingAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingAccountGroupByArgs['orderBy'] }
        : { orderBy?: BillingAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingAccount model
   */
  readonly fields: BillingAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lockedAmounts<T extends BillingAccount$lockedAmountsArgs<ExtArgs> = {}>(args?: Subset<T, BillingAccount$lockedAmountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "findMany"> | Null>
    consumedAmounts<T extends BillingAccount$consumedAmountsArgs<ExtArgs> = {}>(args?: Subset<T, BillingAccount$consumedAmountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "findMany"> | Null>
    accessGrants<T extends BillingAccount$accessGrantsArgs<ExtArgs> = {}>(args?: Subset<T, BillingAccount$accessGrantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingAccount model
   */ 
  interface BillingAccountFieldRefs {
    readonly id: FieldRef<"BillingAccount", 'String'>
    readonly projectId: FieldRef<"BillingAccount", 'String'>
    readonly name: FieldRef<"BillingAccount", 'String'>
    readonly description: FieldRef<"BillingAccount", 'String'>
    readonly status: FieldRef<"BillingAccount", 'BAStatus'>
    readonly startDate: FieldRef<"BillingAccount", 'DateTime'>
    readonly endDate: FieldRef<"BillingAccount", 'DateTime'>
    readonly budget: FieldRef<"BillingAccount", 'Decimal'>
    readonly markup: FieldRef<"BillingAccount", 'Decimal'>
    readonly clientId: FieldRef<"BillingAccount", 'String'>
    readonly poNumber: FieldRef<"BillingAccount", 'String'>
    readonly subscriptionNumber: FieldRef<"BillingAccount", 'String'>
    readonly isManualPrize: FieldRef<"BillingAccount", 'Boolean'>
    readonly paymentTerms: FieldRef<"BillingAccount", 'String'>
    readonly salesTax: FieldRef<"BillingAccount", 'Decimal'>
    readonly billable: FieldRef<"BillingAccount", 'Boolean'>
    readonly createdBy: FieldRef<"BillingAccount", 'String'>
    readonly createdAt: FieldRef<"BillingAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"BillingAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingAccount findUnique
   */
  export type BillingAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccount to fetch.
     */
    where: BillingAccountWhereUniqueInput
  }

  /**
   * BillingAccount findUniqueOrThrow
   */
  export type BillingAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccount to fetch.
     */
    where: BillingAccountWhereUniqueInput
  }

  /**
   * BillingAccount findFirst
   */
  export type BillingAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccount to fetch.
     */
    where?: BillingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccounts to fetch.
     */
    orderBy?: BillingAccountOrderByWithRelationInput | BillingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingAccounts.
     */
    cursor?: BillingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingAccounts.
     */
    distinct?: BillingAccountScalarFieldEnum | BillingAccountScalarFieldEnum[]
  }

  /**
   * BillingAccount findFirstOrThrow
   */
  export type BillingAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccount to fetch.
     */
    where?: BillingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccounts to fetch.
     */
    orderBy?: BillingAccountOrderByWithRelationInput | BillingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingAccounts.
     */
    cursor?: BillingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingAccounts.
     */
    distinct?: BillingAccountScalarFieldEnum | BillingAccountScalarFieldEnum[]
  }

  /**
   * BillingAccount findMany
   */
  export type BillingAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccounts to fetch.
     */
    where?: BillingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccounts to fetch.
     */
    orderBy?: BillingAccountOrderByWithRelationInput | BillingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingAccounts.
     */
    cursor?: BillingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccounts.
     */
    skip?: number
    distinct?: BillingAccountScalarFieldEnum | BillingAccountScalarFieldEnum[]
  }

  /**
   * BillingAccount create
   */
  export type BillingAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a BillingAccount.
     */
    data: XOR<BillingAccountCreateInput, BillingAccountUncheckedCreateInput>
  }

  /**
   * BillingAccount createMany
   */
  export type BillingAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingAccounts.
     */
    data: BillingAccountCreateManyInput | BillingAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BillingAccount createManyAndReturn
   */
  export type BillingAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BillingAccounts.
     */
    data: BillingAccountCreateManyInput | BillingAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillingAccount update
   */
  export type BillingAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a BillingAccount.
     */
    data: XOR<BillingAccountUpdateInput, BillingAccountUncheckedUpdateInput>
    /**
     * Choose, which BillingAccount to update.
     */
    where: BillingAccountWhereUniqueInput
  }

  /**
   * BillingAccount updateMany
   */
  export type BillingAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingAccounts.
     */
    data: XOR<BillingAccountUpdateManyMutationInput, BillingAccountUncheckedUpdateManyInput>
    /**
     * Filter which BillingAccounts to update
     */
    where?: BillingAccountWhereInput
  }

  /**
   * BillingAccount upsert
   */
  export type BillingAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the BillingAccount to update in case it exists.
     */
    where: BillingAccountWhereUniqueInput
    /**
     * In case the BillingAccount found by the `where` argument doesn't exist, create a new BillingAccount with this data.
     */
    create: XOR<BillingAccountCreateInput, BillingAccountUncheckedCreateInput>
    /**
     * In case the BillingAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingAccountUpdateInput, BillingAccountUncheckedUpdateInput>
  }

  /**
   * BillingAccount delete
   */
  export type BillingAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
    /**
     * Filter which BillingAccount to delete.
     */
    where: BillingAccountWhereUniqueInput
  }

  /**
   * BillingAccount deleteMany
   */
  export type BillingAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingAccounts to delete
     */
    where?: BillingAccountWhereInput
  }

  /**
   * BillingAccount.lockedAmounts
   */
  export type BillingAccount$lockedAmountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    where?: LockedAmountWhereInput
    orderBy?: LockedAmountOrderByWithRelationInput | LockedAmountOrderByWithRelationInput[]
    cursor?: LockedAmountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LockedAmountScalarFieldEnum | LockedAmountScalarFieldEnum[]
  }

  /**
   * BillingAccount.consumedAmounts
   */
  export type BillingAccount$consumedAmountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    where?: ConsumedAmountWhereInput
    orderBy?: ConsumedAmountOrderByWithRelationInput | ConsumedAmountOrderByWithRelationInput[]
    cursor?: ConsumedAmountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsumedAmountScalarFieldEnum | ConsumedAmountScalarFieldEnum[]
  }

  /**
   * BillingAccount.accessGrants
   */
  export type BillingAccount$accessGrantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    where?: BillingAccountAccessWhereInput
    orderBy?: BillingAccountAccessOrderByWithRelationInput | BillingAccountAccessOrderByWithRelationInput[]
    cursor?: BillingAccountAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingAccountAccessScalarFieldEnum | BillingAccountAccessScalarFieldEnum[]
  }

  /**
   * BillingAccount without action
   */
  export type BillingAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccount
     */
    select?: BillingAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountInclude<ExtArgs> | null
  }


  /**
   * Model LockedAmount
   */

  export type AggregateLockedAmount = {
    _count: LockedAmountCountAggregateOutputType | null
    _avg: LockedAmountAvgAggregateOutputType | null
    _sum: LockedAmountSumAggregateOutputType | null
    _min: LockedAmountMinAggregateOutputType | null
    _max: LockedAmountMaxAggregateOutputType | null
  }

  export type LockedAmountAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type LockedAmountSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type LockedAmountMinAggregateOutputType = {
    id: string | null
    billingAccountId: string | null
    challengeId: string | null
    amount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LockedAmountMaxAggregateOutputType = {
    id: string | null
    billingAccountId: string | null
    challengeId: string | null
    amount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LockedAmountCountAggregateOutputType = {
    id: number
    billingAccountId: number
    challengeId: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LockedAmountAvgAggregateInputType = {
    amount?: true
  }

  export type LockedAmountSumAggregateInputType = {
    amount?: true
  }

  export type LockedAmountMinAggregateInputType = {
    id?: true
    billingAccountId?: true
    challengeId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LockedAmountMaxAggregateInputType = {
    id?: true
    billingAccountId?: true
    challengeId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LockedAmountCountAggregateInputType = {
    id?: true
    billingAccountId?: true
    challengeId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LockedAmountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LockedAmount to aggregate.
     */
    where?: LockedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LockedAmounts to fetch.
     */
    orderBy?: LockedAmountOrderByWithRelationInput | LockedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LockedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LockedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LockedAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LockedAmounts
    **/
    _count?: true | LockedAmountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LockedAmountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LockedAmountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LockedAmountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LockedAmountMaxAggregateInputType
  }

  export type GetLockedAmountAggregateType<T extends LockedAmountAggregateArgs> = {
        [P in keyof T & keyof AggregateLockedAmount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLockedAmount[P]>
      : GetScalarType<T[P], AggregateLockedAmount[P]>
  }




  export type LockedAmountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LockedAmountWhereInput
    orderBy?: LockedAmountOrderByWithAggregationInput | LockedAmountOrderByWithAggregationInput[]
    by: LockedAmountScalarFieldEnum[] | LockedAmountScalarFieldEnum
    having?: LockedAmountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LockedAmountCountAggregateInputType | true
    _avg?: LockedAmountAvgAggregateInputType
    _sum?: LockedAmountSumAggregateInputType
    _min?: LockedAmountMinAggregateInputType
    _max?: LockedAmountMaxAggregateInputType
  }

  export type LockedAmountGroupByOutputType = {
    id: string
    billingAccountId: string
    challengeId: string
    amount: Decimal
    createdAt: Date
    updatedAt: Date
    _count: LockedAmountCountAggregateOutputType | null
    _avg: LockedAmountAvgAggregateOutputType | null
    _sum: LockedAmountSumAggregateOutputType | null
    _min: LockedAmountMinAggregateOutputType | null
    _max: LockedAmountMaxAggregateOutputType | null
  }

  type GetLockedAmountGroupByPayload<T extends LockedAmountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LockedAmountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LockedAmountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LockedAmountGroupByOutputType[P]>
            : GetScalarType<T[P], LockedAmountGroupByOutputType[P]>
        }
      >
    >


  export type LockedAmountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingAccountId?: boolean
    challengeId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lockedAmount"]>

  export type LockedAmountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingAccountId?: boolean
    challengeId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lockedAmount"]>

  export type LockedAmountSelectScalar = {
    id?: boolean
    billingAccountId?: boolean
    challengeId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LockedAmountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }
  export type LockedAmountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }

  export type $LockedAmountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LockedAmount"
    objects: {
      billingAccount: Prisma.$BillingAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      billingAccountId: string
      challengeId: string
      amount: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["lockedAmount"]>
    composites: {}
  }

  type LockedAmountGetPayload<S extends boolean | null | undefined | LockedAmountDefaultArgs> = $Result.GetResult<Prisma.$LockedAmountPayload, S>

  type LockedAmountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LockedAmountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LockedAmountCountAggregateInputType | true
    }

  export interface LockedAmountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LockedAmount'], meta: { name: 'LockedAmount' } }
    /**
     * Find zero or one LockedAmount that matches the filter.
     * @param {LockedAmountFindUniqueArgs} args - Arguments to find a LockedAmount
     * @example
     * // Get one LockedAmount
     * const lockedAmount = await prisma.lockedAmount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LockedAmountFindUniqueArgs>(args: SelectSubset<T, LockedAmountFindUniqueArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LockedAmount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LockedAmountFindUniqueOrThrowArgs} args - Arguments to find a LockedAmount
     * @example
     * // Get one LockedAmount
     * const lockedAmount = await prisma.lockedAmount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LockedAmountFindUniqueOrThrowArgs>(args: SelectSubset<T, LockedAmountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LockedAmount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountFindFirstArgs} args - Arguments to find a LockedAmount
     * @example
     * // Get one LockedAmount
     * const lockedAmount = await prisma.lockedAmount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LockedAmountFindFirstArgs>(args?: SelectSubset<T, LockedAmountFindFirstArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LockedAmount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountFindFirstOrThrowArgs} args - Arguments to find a LockedAmount
     * @example
     * // Get one LockedAmount
     * const lockedAmount = await prisma.lockedAmount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LockedAmountFindFirstOrThrowArgs>(args?: SelectSubset<T, LockedAmountFindFirstOrThrowArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LockedAmounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LockedAmounts
     * const lockedAmounts = await prisma.lockedAmount.findMany()
     * 
     * // Get first 10 LockedAmounts
     * const lockedAmounts = await prisma.lockedAmount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lockedAmountWithIdOnly = await prisma.lockedAmount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LockedAmountFindManyArgs>(args?: SelectSubset<T, LockedAmountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LockedAmount.
     * @param {LockedAmountCreateArgs} args - Arguments to create a LockedAmount.
     * @example
     * // Create one LockedAmount
     * const LockedAmount = await prisma.lockedAmount.create({
     *   data: {
     *     // ... data to create a LockedAmount
     *   }
     * })
     * 
     */
    create<T extends LockedAmountCreateArgs>(args: SelectSubset<T, LockedAmountCreateArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LockedAmounts.
     * @param {LockedAmountCreateManyArgs} args - Arguments to create many LockedAmounts.
     * @example
     * // Create many LockedAmounts
     * const lockedAmount = await prisma.lockedAmount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LockedAmountCreateManyArgs>(args?: SelectSubset<T, LockedAmountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LockedAmounts and returns the data saved in the database.
     * @param {LockedAmountCreateManyAndReturnArgs} args - Arguments to create many LockedAmounts.
     * @example
     * // Create many LockedAmounts
     * const lockedAmount = await prisma.lockedAmount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LockedAmounts and only return the `id`
     * const lockedAmountWithIdOnly = await prisma.lockedAmount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LockedAmountCreateManyAndReturnArgs>(args?: SelectSubset<T, LockedAmountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LockedAmount.
     * @param {LockedAmountDeleteArgs} args - Arguments to delete one LockedAmount.
     * @example
     * // Delete one LockedAmount
     * const LockedAmount = await prisma.lockedAmount.delete({
     *   where: {
     *     // ... filter to delete one LockedAmount
     *   }
     * })
     * 
     */
    delete<T extends LockedAmountDeleteArgs>(args: SelectSubset<T, LockedAmountDeleteArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LockedAmount.
     * @param {LockedAmountUpdateArgs} args - Arguments to update one LockedAmount.
     * @example
     * // Update one LockedAmount
     * const lockedAmount = await prisma.lockedAmount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LockedAmountUpdateArgs>(args: SelectSubset<T, LockedAmountUpdateArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LockedAmounts.
     * @param {LockedAmountDeleteManyArgs} args - Arguments to filter LockedAmounts to delete.
     * @example
     * // Delete a few LockedAmounts
     * const { count } = await prisma.lockedAmount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LockedAmountDeleteManyArgs>(args?: SelectSubset<T, LockedAmountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LockedAmounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LockedAmounts
     * const lockedAmount = await prisma.lockedAmount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LockedAmountUpdateManyArgs>(args: SelectSubset<T, LockedAmountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LockedAmount.
     * @param {LockedAmountUpsertArgs} args - Arguments to update or create a LockedAmount.
     * @example
     * // Update or create a LockedAmount
     * const lockedAmount = await prisma.lockedAmount.upsert({
     *   create: {
     *     // ... data to create a LockedAmount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LockedAmount we want to update
     *   }
     * })
     */
    upsert<T extends LockedAmountUpsertArgs>(args: SelectSubset<T, LockedAmountUpsertArgs<ExtArgs>>): Prisma__LockedAmountClient<$Result.GetResult<Prisma.$LockedAmountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LockedAmounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountCountArgs} args - Arguments to filter LockedAmounts to count.
     * @example
     * // Count the number of LockedAmounts
     * const count = await prisma.lockedAmount.count({
     *   where: {
     *     // ... the filter for the LockedAmounts we want to count
     *   }
     * })
    **/
    count<T extends LockedAmountCountArgs>(
      args?: Subset<T, LockedAmountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LockedAmountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LockedAmount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LockedAmountAggregateArgs>(args: Subset<T, LockedAmountAggregateArgs>): Prisma.PrismaPromise<GetLockedAmountAggregateType<T>>

    /**
     * Group by LockedAmount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAmountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LockedAmountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LockedAmountGroupByArgs['orderBy'] }
        : { orderBy?: LockedAmountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LockedAmountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLockedAmountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LockedAmount model
   */
  readonly fields: LockedAmountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LockedAmount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LockedAmountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billingAccount<T extends BillingAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BillingAccountDefaultArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LockedAmount model
   */ 
  interface LockedAmountFieldRefs {
    readonly id: FieldRef<"LockedAmount", 'String'>
    readonly billingAccountId: FieldRef<"LockedAmount", 'String'>
    readonly challengeId: FieldRef<"LockedAmount", 'String'>
    readonly amount: FieldRef<"LockedAmount", 'Decimal'>
    readonly createdAt: FieldRef<"LockedAmount", 'DateTime'>
    readonly updatedAt: FieldRef<"LockedAmount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LockedAmount findUnique
   */
  export type LockedAmountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * Filter, which LockedAmount to fetch.
     */
    where: LockedAmountWhereUniqueInput
  }

  /**
   * LockedAmount findUniqueOrThrow
   */
  export type LockedAmountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * Filter, which LockedAmount to fetch.
     */
    where: LockedAmountWhereUniqueInput
  }

  /**
   * LockedAmount findFirst
   */
  export type LockedAmountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * Filter, which LockedAmount to fetch.
     */
    where?: LockedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LockedAmounts to fetch.
     */
    orderBy?: LockedAmountOrderByWithRelationInput | LockedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LockedAmounts.
     */
    cursor?: LockedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LockedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LockedAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LockedAmounts.
     */
    distinct?: LockedAmountScalarFieldEnum | LockedAmountScalarFieldEnum[]
  }

  /**
   * LockedAmount findFirstOrThrow
   */
  export type LockedAmountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * Filter, which LockedAmount to fetch.
     */
    where?: LockedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LockedAmounts to fetch.
     */
    orderBy?: LockedAmountOrderByWithRelationInput | LockedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LockedAmounts.
     */
    cursor?: LockedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LockedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LockedAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LockedAmounts.
     */
    distinct?: LockedAmountScalarFieldEnum | LockedAmountScalarFieldEnum[]
  }

  /**
   * LockedAmount findMany
   */
  export type LockedAmountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * Filter, which LockedAmounts to fetch.
     */
    where?: LockedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LockedAmounts to fetch.
     */
    orderBy?: LockedAmountOrderByWithRelationInput | LockedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LockedAmounts.
     */
    cursor?: LockedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LockedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LockedAmounts.
     */
    skip?: number
    distinct?: LockedAmountScalarFieldEnum | LockedAmountScalarFieldEnum[]
  }

  /**
   * LockedAmount create
   */
  export type LockedAmountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * The data needed to create a LockedAmount.
     */
    data: XOR<LockedAmountCreateInput, LockedAmountUncheckedCreateInput>
  }

  /**
   * LockedAmount createMany
   */
  export type LockedAmountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LockedAmounts.
     */
    data: LockedAmountCreateManyInput | LockedAmountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LockedAmount createManyAndReturn
   */
  export type LockedAmountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LockedAmounts.
     */
    data: LockedAmountCreateManyInput | LockedAmountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LockedAmount update
   */
  export type LockedAmountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * The data needed to update a LockedAmount.
     */
    data: XOR<LockedAmountUpdateInput, LockedAmountUncheckedUpdateInput>
    /**
     * Choose, which LockedAmount to update.
     */
    where: LockedAmountWhereUniqueInput
  }

  /**
   * LockedAmount updateMany
   */
  export type LockedAmountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LockedAmounts.
     */
    data: XOR<LockedAmountUpdateManyMutationInput, LockedAmountUncheckedUpdateManyInput>
    /**
     * Filter which LockedAmounts to update
     */
    where?: LockedAmountWhereInput
  }

  /**
   * LockedAmount upsert
   */
  export type LockedAmountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * The filter to search for the LockedAmount to update in case it exists.
     */
    where: LockedAmountWhereUniqueInput
    /**
     * In case the LockedAmount found by the `where` argument doesn't exist, create a new LockedAmount with this data.
     */
    create: XOR<LockedAmountCreateInput, LockedAmountUncheckedCreateInput>
    /**
     * In case the LockedAmount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LockedAmountUpdateInput, LockedAmountUncheckedUpdateInput>
  }

  /**
   * LockedAmount delete
   */
  export type LockedAmountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
    /**
     * Filter which LockedAmount to delete.
     */
    where: LockedAmountWhereUniqueInput
  }

  /**
   * LockedAmount deleteMany
   */
  export type LockedAmountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LockedAmounts to delete
     */
    where?: LockedAmountWhereInput
  }

  /**
   * LockedAmount without action
   */
  export type LockedAmountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LockedAmount
     */
    select?: LockedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LockedAmountInclude<ExtArgs> | null
  }


  /**
   * Model ConsumedAmount
   */

  export type AggregateConsumedAmount = {
    _count: ConsumedAmountCountAggregateOutputType | null
    _avg: ConsumedAmountAvgAggregateOutputType | null
    _sum: ConsumedAmountSumAggregateOutputType | null
    _min: ConsumedAmountMinAggregateOutputType | null
    _max: ConsumedAmountMaxAggregateOutputType | null
  }

  export type ConsumedAmountAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type ConsumedAmountSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type ConsumedAmountMinAggregateOutputType = {
    id: string | null
    billingAccountId: string | null
    challengeId: string | null
    amount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsumedAmountMaxAggregateOutputType = {
    id: string | null
    billingAccountId: string | null
    challengeId: string | null
    amount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsumedAmountCountAggregateOutputType = {
    id: number
    billingAccountId: number
    challengeId: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsumedAmountAvgAggregateInputType = {
    amount?: true
  }

  export type ConsumedAmountSumAggregateInputType = {
    amount?: true
  }

  export type ConsumedAmountMinAggregateInputType = {
    id?: true
    billingAccountId?: true
    challengeId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsumedAmountMaxAggregateInputType = {
    id?: true
    billingAccountId?: true
    challengeId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsumedAmountCountAggregateInputType = {
    id?: true
    billingAccountId?: true
    challengeId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsumedAmountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumedAmount to aggregate.
     */
    where?: ConsumedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedAmounts to fetch.
     */
    orderBy?: ConsumedAmountOrderByWithRelationInput | ConsumedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsumedAmounts
    **/
    _count?: true | ConsumedAmountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsumedAmountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsumedAmountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumedAmountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumedAmountMaxAggregateInputType
  }

  export type GetConsumedAmountAggregateType<T extends ConsumedAmountAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumedAmount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumedAmount[P]>
      : GetScalarType<T[P], AggregateConsumedAmount[P]>
  }




  export type ConsumedAmountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumedAmountWhereInput
    orderBy?: ConsumedAmountOrderByWithAggregationInput | ConsumedAmountOrderByWithAggregationInput[]
    by: ConsumedAmountScalarFieldEnum[] | ConsumedAmountScalarFieldEnum
    having?: ConsumedAmountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumedAmountCountAggregateInputType | true
    _avg?: ConsumedAmountAvgAggregateInputType
    _sum?: ConsumedAmountSumAggregateInputType
    _min?: ConsumedAmountMinAggregateInputType
    _max?: ConsumedAmountMaxAggregateInputType
  }

  export type ConsumedAmountGroupByOutputType = {
    id: string
    billingAccountId: string
    challengeId: string
    amount: Decimal
    createdAt: Date
    updatedAt: Date
    _count: ConsumedAmountCountAggregateOutputType | null
    _avg: ConsumedAmountAvgAggregateOutputType | null
    _sum: ConsumedAmountSumAggregateOutputType | null
    _min: ConsumedAmountMinAggregateOutputType | null
    _max: ConsumedAmountMaxAggregateOutputType | null
  }

  type GetConsumedAmountGroupByPayload<T extends ConsumedAmountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumedAmountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumedAmountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumedAmountGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumedAmountGroupByOutputType[P]>
        }
      >
    >


  export type ConsumedAmountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingAccountId?: boolean
    challengeId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedAmount"]>

  export type ConsumedAmountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingAccountId?: boolean
    challengeId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumedAmount"]>

  export type ConsumedAmountSelectScalar = {
    id?: boolean
    billingAccountId?: boolean
    challengeId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsumedAmountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }
  export type ConsumedAmountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }

  export type $ConsumedAmountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsumedAmount"
    objects: {
      billingAccount: Prisma.$BillingAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      billingAccountId: string
      challengeId: string
      amount: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consumedAmount"]>
    composites: {}
  }

  type ConsumedAmountGetPayload<S extends boolean | null | undefined | ConsumedAmountDefaultArgs> = $Result.GetResult<Prisma.$ConsumedAmountPayload, S>

  type ConsumedAmountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsumedAmountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsumedAmountCountAggregateInputType | true
    }

  export interface ConsumedAmountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsumedAmount'], meta: { name: 'ConsumedAmount' } }
    /**
     * Find zero or one ConsumedAmount that matches the filter.
     * @param {ConsumedAmountFindUniqueArgs} args - Arguments to find a ConsumedAmount
     * @example
     * // Get one ConsumedAmount
     * const consumedAmount = await prisma.consumedAmount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumedAmountFindUniqueArgs>(args: SelectSubset<T, ConsumedAmountFindUniqueArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConsumedAmount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsumedAmountFindUniqueOrThrowArgs} args - Arguments to find a ConsumedAmount
     * @example
     * // Get one ConsumedAmount
     * const consumedAmount = await prisma.consumedAmount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumedAmountFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumedAmountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConsumedAmount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountFindFirstArgs} args - Arguments to find a ConsumedAmount
     * @example
     * // Get one ConsumedAmount
     * const consumedAmount = await prisma.consumedAmount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumedAmountFindFirstArgs>(args?: SelectSubset<T, ConsumedAmountFindFirstArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConsumedAmount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountFindFirstOrThrowArgs} args - Arguments to find a ConsumedAmount
     * @example
     * // Get one ConsumedAmount
     * const consumedAmount = await prisma.consumedAmount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumedAmountFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumedAmountFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConsumedAmounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsumedAmounts
     * const consumedAmounts = await prisma.consumedAmount.findMany()
     * 
     * // Get first 10 ConsumedAmounts
     * const consumedAmounts = await prisma.consumedAmount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumedAmountWithIdOnly = await prisma.consumedAmount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumedAmountFindManyArgs>(args?: SelectSubset<T, ConsumedAmountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConsumedAmount.
     * @param {ConsumedAmountCreateArgs} args - Arguments to create a ConsumedAmount.
     * @example
     * // Create one ConsumedAmount
     * const ConsumedAmount = await prisma.consumedAmount.create({
     *   data: {
     *     // ... data to create a ConsumedAmount
     *   }
     * })
     * 
     */
    create<T extends ConsumedAmountCreateArgs>(args: SelectSubset<T, ConsumedAmountCreateArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConsumedAmounts.
     * @param {ConsumedAmountCreateManyArgs} args - Arguments to create many ConsumedAmounts.
     * @example
     * // Create many ConsumedAmounts
     * const consumedAmount = await prisma.consumedAmount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumedAmountCreateManyArgs>(args?: SelectSubset<T, ConsumedAmountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsumedAmounts and returns the data saved in the database.
     * @param {ConsumedAmountCreateManyAndReturnArgs} args - Arguments to create many ConsumedAmounts.
     * @example
     * // Create many ConsumedAmounts
     * const consumedAmount = await prisma.consumedAmount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsumedAmounts and only return the `id`
     * const consumedAmountWithIdOnly = await prisma.consumedAmount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsumedAmountCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsumedAmountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConsumedAmount.
     * @param {ConsumedAmountDeleteArgs} args - Arguments to delete one ConsumedAmount.
     * @example
     * // Delete one ConsumedAmount
     * const ConsumedAmount = await prisma.consumedAmount.delete({
     *   where: {
     *     // ... filter to delete one ConsumedAmount
     *   }
     * })
     * 
     */
    delete<T extends ConsumedAmountDeleteArgs>(args: SelectSubset<T, ConsumedAmountDeleteArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConsumedAmount.
     * @param {ConsumedAmountUpdateArgs} args - Arguments to update one ConsumedAmount.
     * @example
     * // Update one ConsumedAmount
     * const consumedAmount = await prisma.consumedAmount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumedAmountUpdateArgs>(args: SelectSubset<T, ConsumedAmountUpdateArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConsumedAmounts.
     * @param {ConsumedAmountDeleteManyArgs} args - Arguments to filter ConsumedAmounts to delete.
     * @example
     * // Delete a few ConsumedAmounts
     * const { count } = await prisma.consumedAmount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumedAmountDeleteManyArgs>(args?: SelectSubset<T, ConsumedAmountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumedAmounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsumedAmounts
     * const consumedAmount = await prisma.consumedAmount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumedAmountUpdateManyArgs>(args: SelectSubset<T, ConsumedAmountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsumedAmount.
     * @param {ConsumedAmountUpsertArgs} args - Arguments to update or create a ConsumedAmount.
     * @example
     * // Update or create a ConsumedAmount
     * const consumedAmount = await prisma.consumedAmount.upsert({
     *   create: {
     *     // ... data to create a ConsumedAmount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsumedAmount we want to update
     *   }
     * })
     */
    upsert<T extends ConsumedAmountUpsertArgs>(args: SelectSubset<T, ConsumedAmountUpsertArgs<ExtArgs>>): Prisma__ConsumedAmountClient<$Result.GetResult<Prisma.$ConsumedAmountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConsumedAmounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountCountArgs} args - Arguments to filter ConsumedAmounts to count.
     * @example
     * // Count the number of ConsumedAmounts
     * const count = await prisma.consumedAmount.count({
     *   where: {
     *     // ... the filter for the ConsumedAmounts we want to count
     *   }
     * })
    **/
    count<T extends ConsumedAmountCountArgs>(
      args?: Subset<T, ConsumedAmountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumedAmountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsumedAmount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumedAmountAggregateArgs>(args: Subset<T, ConsumedAmountAggregateArgs>): Prisma.PrismaPromise<GetConsumedAmountAggregateType<T>>

    /**
     * Group by ConsumedAmount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumedAmountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumedAmountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumedAmountGroupByArgs['orderBy'] }
        : { orderBy?: ConsumedAmountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumedAmountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumedAmountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsumedAmount model
   */
  readonly fields: ConsumedAmountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsumedAmount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumedAmountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billingAccount<T extends BillingAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BillingAccountDefaultArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsumedAmount model
   */ 
  interface ConsumedAmountFieldRefs {
    readonly id: FieldRef<"ConsumedAmount", 'String'>
    readonly billingAccountId: FieldRef<"ConsumedAmount", 'String'>
    readonly challengeId: FieldRef<"ConsumedAmount", 'String'>
    readonly amount: FieldRef<"ConsumedAmount", 'Decimal'>
    readonly createdAt: FieldRef<"ConsumedAmount", 'DateTime'>
    readonly updatedAt: FieldRef<"ConsumedAmount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConsumedAmount findUnique
   */
  export type ConsumedAmountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedAmount to fetch.
     */
    where: ConsumedAmountWhereUniqueInput
  }

  /**
   * ConsumedAmount findUniqueOrThrow
   */
  export type ConsumedAmountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedAmount to fetch.
     */
    where: ConsumedAmountWhereUniqueInput
  }

  /**
   * ConsumedAmount findFirst
   */
  export type ConsumedAmountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedAmount to fetch.
     */
    where?: ConsumedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedAmounts to fetch.
     */
    orderBy?: ConsumedAmountOrderByWithRelationInput | ConsumedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumedAmounts.
     */
    cursor?: ConsumedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumedAmounts.
     */
    distinct?: ConsumedAmountScalarFieldEnum | ConsumedAmountScalarFieldEnum[]
  }

  /**
   * ConsumedAmount findFirstOrThrow
   */
  export type ConsumedAmountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedAmount to fetch.
     */
    where?: ConsumedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedAmounts to fetch.
     */
    orderBy?: ConsumedAmountOrderByWithRelationInput | ConsumedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumedAmounts.
     */
    cursor?: ConsumedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumedAmounts.
     */
    distinct?: ConsumedAmountScalarFieldEnum | ConsumedAmountScalarFieldEnum[]
  }

  /**
   * ConsumedAmount findMany
   */
  export type ConsumedAmountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * Filter, which ConsumedAmounts to fetch.
     */
    where?: ConsumedAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumedAmounts to fetch.
     */
    orderBy?: ConsumedAmountOrderByWithRelationInput | ConsumedAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsumedAmounts.
     */
    cursor?: ConsumedAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumedAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumedAmounts.
     */
    skip?: number
    distinct?: ConsumedAmountScalarFieldEnum | ConsumedAmountScalarFieldEnum[]
  }

  /**
   * ConsumedAmount create
   */
  export type ConsumedAmountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsumedAmount.
     */
    data: XOR<ConsumedAmountCreateInput, ConsumedAmountUncheckedCreateInput>
  }

  /**
   * ConsumedAmount createMany
   */
  export type ConsumedAmountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsumedAmounts.
     */
    data: ConsumedAmountCreateManyInput | ConsumedAmountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsumedAmount createManyAndReturn
   */
  export type ConsumedAmountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConsumedAmounts.
     */
    data: ConsumedAmountCreateManyInput | ConsumedAmountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsumedAmount update
   */
  export type ConsumedAmountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsumedAmount.
     */
    data: XOR<ConsumedAmountUpdateInput, ConsumedAmountUncheckedUpdateInput>
    /**
     * Choose, which ConsumedAmount to update.
     */
    where: ConsumedAmountWhereUniqueInput
  }

  /**
   * ConsumedAmount updateMany
   */
  export type ConsumedAmountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsumedAmounts.
     */
    data: XOR<ConsumedAmountUpdateManyMutationInput, ConsumedAmountUncheckedUpdateManyInput>
    /**
     * Filter which ConsumedAmounts to update
     */
    where?: ConsumedAmountWhereInput
  }

  /**
   * ConsumedAmount upsert
   */
  export type ConsumedAmountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsumedAmount to update in case it exists.
     */
    where: ConsumedAmountWhereUniqueInput
    /**
     * In case the ConsumedAmount found by the `where` argument doesn't exist, create a new ConsumedAmount with this data.
     */
    create: XOR<ConsumedAmountCreateInput, ConsumedAmountUncheckedCreateInput>
    /**
     * In case the ConsumedAmount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumedAmountUpdateInput, ConsumedAmountUncheckedUpdateInput>
  }

  /**
   * ConsumedAmount delete
   */
  export type ConsumedAmountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
    /**
     * Filter which ConsumedAmount to delete.
     */
    where: ConsumedAmountWhereUniqueInput
  }

  /**
   * ConsumedAmount deleteMany
   */
  export type ConsumedAmountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsumedAmounts to delete
     */
    where?: ConsumedAmountWhereInput
  }

  /**
   * ConsumedAmount without action
   */
  export type ConsumedAmountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumedAmount
     */
    select?: ConsumedAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumedAmountInclude<ExtArgs> | null
  }


  /**
   * Model BillingAccountAccess
   */

  export type AggregateBillingAccountAccess = {
    _count: BillingAccountAccessCountAggregateOutputType | null
    _min: BillingAccountAccessMinAggregateOutputType | null
    _max: BillingAccountAccessMaxAggregateOutputType | null
  }

  export type BillingAccountAccessMinAggregateOutputType = {
    id: string | null
    billingAccountId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BillingAccountAccessMaxAggregateOutputType = {
    id: string | null
    billingAccountId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BillingAccountAccessCountAggregateOutputType = {
    id: number
    billingAccountId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type BillingAccountAccessMinAggregateInputType = {
    id?: true
    billingAccountId?: true
    userId?: true
    createdAt?: true
  }

  export type BillingAccountAccessMaxAggregateInputType = {
    id?: true
    billingAccountId?: true
    userId?: true
    createdAt?: true
  }

  export type BillingAccountAccessCountAggregateInputType = {
    id?: true
    billingAccountId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type BillingAccountAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingAccountAccess to aggregate.
     */
    where?: BillingAccountAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccountAccesses to fetch.
     */
    orderBy?: BillingAccountAccessOrderByWithRelationInput | BillingAccountAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingAccountAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccountAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccountAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingAccountAccesses
    **/
    _count?: true | BillingAccountAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingAccountAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingAccountAccessMaxAggregateInputType
  }

  export type GetBillingAccountAccessAggregateType<T extends BillingAccountAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingAccountAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingAccountAccess[P]>
      : GetScalarType<T[P], AggregateBillingAccountAccess[P]>
  }




  export type BillingAccountAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingAccountAccessWhereInput
    orderBy?: BillingAccountAccessOrderByWithAggregationInput | BillingAccountAccessOrderByWithAggregationInput[]
    by: BillingAccountAccessScalarFieldEnum[] | BillingAccountAccessScalarFieldEnum
    having?: BillingAccountAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingAccountAccessCountAggregateInputType | true
    _min?: BillingAccountAccessMinAggregateInputType
    _max?: BillingAccountAccessMaxAggregateInputType
  }

  export type BillingAccountAccessGroupByOutputType = {
    id: string
    billingAccountId: string
    userId: string
    createdAt: Date
    _count: BillingAccountAccessCountAggregateOutputType | null
    _min: BillingAccountAccessMinAggregateOutputType | null
    _max: BillingAccountAccessMaxAggregateOutputType | null
  }

  type GetBillingAccountAccessGroupByPayload<T extends BillingAccountAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingAccountAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingAccountAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingAccountAccessGroupByOutputType[P]>
            : GetScalarType<T[P], BillingAccountAccessGroupByOutputType[P]>
        }
      >
    >


  export type BillingAccountAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingAccountId?: boolean
    userId?: boolean
    createdAt?: boolean
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingAccountAccess"]>

  export type BillingAccountAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingAccountId?: boolean
    userId?: boolean
    createdAt?: boolean
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingAccountAccess"]>

  export type BillingAccountAccessSelectScalar = {
    id?: boolean
    billingAccountId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type BillingAccountAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }
  export type BillingAccountAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billingAccount?: boolean | BillingAccountDefaultArgs<ExtArgs>
  }

  export type $BillingAccountAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingAccountAccess"
    objects: {
      billingAccount: Prisma.$BillingAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      billingAccountId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["billingAccountAccess"]>
    composites: {}
  }

  type BillingAccountAccessGetPayload<S extends boolean | null | undefined | BillingAccountAccessDefaultArgs> = $Result.GetResult<Prisma.$BillingAccountAccessPayload, S>

  type BillingAccountAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillingAccountAccessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillingAccountAccessCountAggregateInputType | true
    }

  export interface BillingAccountAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingAccountAccess'], meta: { name: 'BillingAccountAccess' } }
    /**
     * Find zero or one BillingAccountAccess that matches the filter.
     * @param {BillingAccountAccessFindUniqueArgs} args - Arguments to find a BillingAccountAccess
     * @example
     * // Get one BillingAccountAccess
     * const billingAccountAccess = await prisma.billingAccountAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingAccountAccessFindUniqueArgs>(args: SelectSubset<T, BillingAccountAccessFindUniqueArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BillingAccountAccess that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillingAccountAccessFindUniqueOrThrowArgs} args - Arguments to find a BillingAccountAccess
     * @example
     * // Get one BillingAccountAccess
     * const billingAccountAccess = await prisma.billingAccountAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingAccountAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingAccountAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BillingAccountAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessFindFirstArgs} args - Arguments to find a BillingAccountAccess
     * @example
     * // Get one BillingAccountAccess
     * const billingAccountAccess = await prisma.billingAccountAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingAccountAccessFindFirstArgs>(args?: SelectSubset<T, BillingAccountAccessFindFirstArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BillingAccountAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessFindFirstOrThrowArgs} args - Arguments to find a BillingAccountAccess
     * @example
     * // Get one BillingAccountAccess
     * const billingAccountAccess = await prisma.billingAccountAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingAccountAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingAccountAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BillingAccountAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingAccountAccesses
     * const billingAccountAccesses = await prisma.billingAccountAccess.findMany()
     * 
     * // Get first 10 BillingAccountAccesses
     * const billingAccountAccesses = await prisma.billingAccountAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingAccountAccessWithIdOnly = await prisma.billingAccountAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingAccountAccessFindManyArgs>(args?: SelectSubset<T, BillingAccountAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BillingAccountAccess.
     * @param {BillingAccountAccessCreateArgs} args - Arguments to create a BillingAccountAccess.
     * @example
     * // Create one BillingAccountAccess
     * const BillingAccountAccess = await prisma.billingAccountAccess.create({
     *   data: {
     *     // ... data to create a BillingAccountAccess
     *   }
     * })
     * 
     */
    create<T extends BillingAccountAccessCreateArgs>(args: SelectSubset<T, BillingAccountAccessCreateArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BillingAccountAccesses.
     * @param {BillingAccountAccessCreateManyArgs} args - Arguments to create many BillingAccountAccesses.
     * @example
     * // Create many BillingAccountAccesses
     * const billingAccountAccess = await prisma.billingAccountAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingAccountAccessCreateManyArgs>(args?: SelectSubset<T, BillingAccountAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillingAccountAccesses and returns the data saved in the database.
     * @param {BillingAccountAccessCreateManyAndReturnArgs} args - Arguments to create many BillingAccountAccesses.
     * @example
     * // Create many BillingAccountAccesses
     * const billingAccountAccess = await prisma.billingAccountAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillingAccountAccesses and only return the `id`
     * const billingAccountAccessWithIdOnly = await prisma.billingAccountAccess.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingAccountAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingAccountAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BillingAccountAccess.
     * @param {BillingAccountAccessDeleteArgs} args - Arguments to delete one BillingAccountAccess.
     * @example
     * // Delete one BillingAccountAccess
     * const BillingAccountAccess = await prisma.billingAccountAccess.delete({
     *   where: {
     *     // ... filter to delete one BillingAccountAccess
     *   }
     * })
     * 
     */
    delete<T extends BillingAccountAccessDeleteArgs>(args: SelectSubset<T, BillingAccountAccessDeleteArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BillingAccountAccess.
     * @param {BillingAccountAccessUpdateArgs} args - Arguments to update one BillingAccountAccess.
     * @example
     * // Update one BillingAccountAccess
     * const billingAccountAccess = await prisma.billingAccountAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingAccountAccessUpdateArgs>(args: SelectSubset<T, BillingAccountAccessUpdateArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BillingAccountAccesses.
     * @param {BillingAccountAccessDeleteManyArgs} args - Arguments to filter BillingAccountAccesses to delete.
     * @example
     * // Delete a few BillingAccountAccesses
     * const { count } = await prisma.billingAccountAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingAccountAccessDeleteManyArgs>(args?: SelectSubset<T, BillingAccountAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingAccountAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingAccountAccesses
     * const billingAccountAccess = await prisma.billingAccountAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingAccountAccessUpdateManyArgs>(args: SelectSubset<T, BillingAccountAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BillingAccountAccess.
     * @param {BillingAccountAccessUpsertArgs} args - Arguments to update or create a BillingAccountAccess.
     * @example
     * // Update or create a BillingAccountAccess
     * const billingAccountAccess = await prisma.billingAccountAccess.upsert({
     *   create: {
     *     // ... data to create a BillingAccountAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingAccountAccess we want to update
     *   }
     * })
     */
    upsert<T extends BillingAccountAccessUpsertArgs>(args: SelectSubset<T, BillingAccountAccessUpsertArgs<ExtArgs>>): Prisma__BillingAccountAccessClient<$Result.GetResult<Prisma.$BillingAccountAccessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BillingAccountAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessCountArgs} args - Arguments to filter BillingAccountAccesses to count.
     * @example
     * // Count the number of BillingAccountAccesses
     * const count = await prisma.billingAccountAccess.count({
     *   where: {
     *     // ... the filter for the BillingAccountAccesses we want to count
     *   }
     * })
    **/
    count<T extends BillingAccountAccessCountArgs>(
      args?: Subset<T, BillingAccountAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingAccountAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingAccountAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingAccountAccessAggregateArgs>(args: Subset<T, BillingAccountAccessAggregateArgs>): Prisma.PrismaPromise<GetBillingAccountAccessAggregateType<T>>

    /**
     * Group by BillingAccountAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAccountAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingAccountAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingAccountAccessGroupByArgs['orderBy'] }
        : { orderBy?: BillingAccountAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingAccountAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingAccountAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingAccountAccess model
   */
  readonly fields: BillingAccountAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingAccountAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingAccountAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billingAccount<T extends BillingAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BillingAccountDefaultArgs<ExtArgs>>): Prisma__BillingAccountClient<$Result.GetResult<Prisma.$BillingAccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingAccountAccess model
   */ 
  interface BillingAccountAccessFieldRefs {
    readonly id: FieldRef<"BillingAccountAccess", 'String'>
    readonly billingAccountId: FieldRef<"BillingAccountAccess", 'String'>
    readonly userId: FieldRef<"BillingAccountAccess", 'String'>
    readonly createdAt: FieldRef<"BillingAccountAccess", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingAccountAccess findUnique
   */
  export type BillingAccountAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccountAccess to fetch.
     */
    where: BillingAccountAccessWhereUniqueInput
  }

  /**
   * BillingAccountAccess findUniqueOrThrow
   */
  export type BillingAccountAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccountAccess to fetch.
     */
    where: BillingAccountAccessWhereUniqueInput
  }

  /**
   * BillingAccountAccess findFirst
   */
  export type BillingAccountAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccountAccess to fetch.
     */
    where?: BillingAccountAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccountAccesses to fetch.
     */
    orderBy?: BillingAccountAccessOrderByWithRelationInput | BillingAccountAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingAccountAccesses.
     */
    cursor?: BillingAccountAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccountAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccountAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingAccountAccesses.
     */
    distinct?: BillingAccountAccessScalarFieldEnum | BillingAccountAccessScalarFieldEnum[]
  }

  /**
   * BillingAccountAccess findFirstOrThrow
   */
  export type BillingAccountAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccountAccess to fetch.
     */
    where?: BillingAccountAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccountAccesses to fetch.
     */
    orderBy?: BillingAccountAccessOrderByWithRelationInput | BillingAccountAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingAccountAccesses.
     */
    cursor?: BillingAccountAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccountAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccountAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingAccountAccesses.
     */
    distinct?: BillingAccountAccessScalarFieldEnum | BillingAccountAccessScalarFieldEnum[]
  }

  /**
   * BillingAccountAccess findMany
   */
  export type BillingAccountAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * Filter, which BillingAccountAccesses to fetch.
     */
    where?: BillingAccountAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingAccountAccesses to fetch.
     */
    orderBy?: BillingAccountAccessOrderByWithRelationInput | BillingAccountAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingAccountAccesses.
     */
    cursor?: BillingAccountAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingAccountAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingAccountAccesses.
     */
    skip?: number
    distinct?: BillingAccountAccessScalarFieldEnum | BillingAccountAccessScalarFieldEnum[]
  }

  /**
   * BillingAccountAccess create
   */
  export type BillingAccountAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a BillingAccountAccess.
     */
    data: XOR<BillingAccountAccessCreateInput, BillingAccountAccessUncheckedCreateInput>
  }

  /**
   * BillingAccountAccess createMany
   */
  export type BillingAccountAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingAccountAccesses.
     */
    data: BillingAccountAccessCreateManyInput | BillingAccountAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BillingAccountAccess createManyAndReturn
   */
  export type BillingAccountAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BillingAccountAccesses.
     */
    data: BillingAccountAccessCreateManyInput | BillingAccountAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillingAccountAccess update
   */
  export type BillingAccountAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a BillingAccountAccess.
     */
    data: XOR<BillingAccountAccessUpdateInput, BillingAccountAccessUncheckedUpdateInput>
    /**
     * Choose, which BillingAccountAccess to update.
     */
    where: BillingAccountAccessWhereUniqueInput
  }

  /**
   * BillingAccountAccess updateMany
   */
  export type BillingAccountAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingAccountAccesses.
     */
    data: XOR<BillingAccountAccessUpdateManyMutationInput, BillingAccountAccessUncheckedUpdateManyInput>
    /**
     * Filter which BillingAccountAccesses to update
     */
    where?: BillingAccountAccessWhereInput
  }

  /**
   * BillingAccountAccess upsert
   */
  export type BillingAccountAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the BillingAccountAccess to update in case it exists.
     */
    where: BillingAccountAccessWhereUniqueInput
    /**
     * In case the BillingAccountAccess found by the `where` argument doesn't exist, create a new BillingAccountAccess with this data.
     */
    create: XOR<BillingAccountAccessCreateInput, BillingAccountAccessUncheckedCreateInput>
    /**
     * In case the BillingAccountAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingAccountAccessUpdateInput, BillingAccountAccessUncheckedUpdateInput>
  }

  /**
   * BillingAccountAccess delete
   */
  export type BillingAccountAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
    /**
     * Filter which BillingAccountAccess to delete.
     */
    where: BillingAccountAccessWhereUniqueInput
  }

  /**
   * BillingAccountAccess deleteMany
   */
  export type BillingAccountAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingAccountAccesses to delete
     */
    where?: BillingAccountAccessWhereInput
  }

  /**
   * BillingAccountAccess without action
   */
  export type BillingAccountAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingAccountAccess
     */
    select?: BillingAccountAccessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingAccountAccessInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    codeName: 'codeName',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const BillingAccountScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    name: 'name',
    description: 'description',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    budget: 'budget',
    markup: 'markup',
    clientId: 'clientId',
    poNumber: 'poNumber',
    subscriptionNumber: 'subscriptionNumber',
    isManualPrize: 'isManualPrize',
    paymentTerms: 'paymentTerms',
    salesTax: 'salesTax',
    billable: 'billable',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BillingAccountScalarFieldEnum = (typeof BillingAccountScalarFieldEnum)[keyof typeof BillingAccountScalarFieldEnum]


  export const LockedAmountScalarFieldEnum: {
    id: 'id',
    billingAccountId: 'billingAccountId',
    challengeId: 'challengeId',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LockedAmountScalarFieldEnum = (typeof LockedAmountScalarFieldEnum)[keyof typeof LockedAmountScalarFieldEnum]


  export const ConsumedAmountScalarFieldEnum: {
    id: 'id',
    billingAccountId: 'billingAccountId',
    challengeId: 'challengeId',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsumedAmountScalarFieldEnum = (typeof ConsumedAmountScalarFieldEnum)[keyof typeof ConsumedAmountScalarFieldEnum]


  export const BillingAccountAccessScalarFieldEnum: {
    id: 'id',
    billingAccountId: 'billingAccountId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type BillingAccountAccessScalarFieldEnum = (typeof BillingAccountAccessScalarFieldEnum)[keyof typeof BillingAccountAccessScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ClientStatus'
   */
  export type EnumClientStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClientStatus'>
    


  /**
   * Reference to a field of type 'ClientStatus[]'
   */
  export type ListEnumClientStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClientStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'BAStatus'
   */
  export type EnumBAStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BAStatus'>
    


  /**
   * Reference to a field of type 'BAStatus[]'
   */
  export type ListEnumBAStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BAStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    codeName?: StringNullableFilter<"Client"> | string | null
    status?: EnumClientStatusFilter<"Client"> | $Enums.ClientStatus
    startDate?: DateTimeNullableFilter<"Client"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Client"> | Date | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    billingAccounts?: BillingAccountListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    codeName?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingAccounts?: BillingAccountOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    codeName?: StringNullableFilter<"Client"> | string | null
    status?: EnumClientStatusFilter<"Client"> | $Enums.ClientStatus
    startDate?: DateTimeNullableFilter<"Client"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Client"> | Date | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    billingAccounts?: BillingAccountListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    codeName?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    name?: StringWithAggregatesFilter<"Client"> | string
    codeName?: StringNullableWithAggregatesFilter<"Client"> | string | null
    status?: EnumClientStatusWithAggregatesFilter<"Client"> | $Enums.ClientStatus
    startDate?: DateTimeNullableWithAggregatesFilter<"Client"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Client"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type BillingAccountWhereInput = {
    AND?: BillingAccountWhereInput | BillingAccountWhereInput[]
    OR?: BillingAccountWhereInput[]
    NOT?: BillingAccountWhereInput | BillingAccountWhereInput[]
    id?: StringFilter<"BillingAccount"> | string
    projectId?: StringNullableFilter<"BillingAccount"> | string | null
    name?: StringFilter<"BillingAccount"> | string
    description?: StringNullableFilter<"BillingAccount"> | string | null
    status?: EnumBAStatusFilter<"BillingAccount"> | $Enums.BAStatus
    startDate?: DateTimeNullableFilter<"BillingAccount"> | Date | string | null
    endDate?: DateTimeNullableFilter<"BillingAccount"> | Date | string | null
    budget?: DecimalFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    markup?: DecimalFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    clientId?: StringFilter<"BillingAccount"> | string
    poNumber?: StringNullableFilter<"BillingAccount"> | string | null
    subscriptionNumber?: StringNullableFilter<"BillingAccount"> | string | null
    isManualPrize?: BoolFilter<"BillingAccount"> | boolean
    paymentTerms?: StringNullableFilter<"BillingAccount"> | string | null
    salesTax?: DecimalNullableFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFilter<"BillingAccount"> | boolean
    createdBy?: StringNullableFilter<"BillingAccount"> | string | null
    createdAt?: DateTimeFilter<"BillingAccount"> | Date | string
    updatedAt?: DateTimeFilter<"BillingAccount"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    lockedAmounts?: LockedAmountListRelationFilter
    consumedAmounts?: ConsumedAmountListRelationFilter
    accessGrants?: BillingAccountAccessListRelationFilter
  }

  export type BillingAccountOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    budget?: SortOrder
    markup?: SortOrder
    clientId?: SortOrder
    poNumber?: SortOrderInput | SortOrder
    subscriptionNumber?: SortOrderInput | SortOrder
    isManualPrize?: SortOrder
    paymentTerms?: SortOrderInput | SortOrder
    salesTax?: SortOrderInput | SortOrder
    billable?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    lockedAmounts?: LockedAmountOrderByRelationAggregateInput
    consumedAmounts?: ConsumedAmountOrderByRelationAggregateInput
    accessGrants?: BillingAccountAccessOrderByRelationAggregateInput
  }

  export type BillingAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BillingAccountWhereInput | BillingAccountWhereInput[]
    OR?: BillingAccountWhereInput[]
    NOT?: BillingAccountWhereInput | BillingAccountWhereInput[]
    projectId?: StringNullableFilter<"BillingAccount"> | string | null
    name?: StringFilter<"BillingAccount"> | string
    description?: StringNullableFilter<"BillingAccount"> | string | null
    status?: EnumBAStatusFilter<"BillingAccount"> | $Enums.BAStatus
    startDate?: DateTimeNullableFilter<"BillingAccount"> | Date | string | null
    endDate?: DateTimeNullableFilter<"BillingAccount"> | Date | string | null
    budget?: DecimalFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    markup?: DecimalFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    clientId?: StringFilter<"BillingAccount"> | string
    poNumber?: StringNullableFilter<"BillingAccount"> | string | null
    subscriptionNumber?: StringNullableFilter<"BillingAccount"> | string | null
    isManualPrize?: BoolFilter<"BillingAccount"> | boolean
    paymentTerms?: StringNullableFilter<"BillingAccount"> | string | null
    salesTax?: DecimalNullableFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFilter<"BillingAccount"> | boolean
    createdBy?: StringNullableFilter<"BillingAccount"> | string | null
    createdAt?: DateTimeFilter<"BillingAccount"> | Date | string
    updatedAt?: DateTimeFilter<"BillingAccount"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    lockedAmounts?: LockedAmountListRelationFilter
    consumedAmounts?: ConsumedAmountListRelationFilter
    accessGrants?: BillingAccountAccessListRelationFilter
  }, "id">

  export type BillingAccountOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    budget?: SortOrder
    markup?: SortOrder
    clientId?: SortOrder
    poNumber?: SortOrderInput | SortOrder
    subscriptionNumber?: SortOrderInput | SortOrder
    isManualPrize?: SortOrder
    paymentTerms?: SortOrderInput | SortOrder
    salesTax?: SortOrderInput | SortOrder
    billable?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BillingAccountCountOrderByAggregateInput
    _avg?: BillingAccountAvgOrderByAggregateInput
    _max?: BillingAccountMaxOrderByAggregateInput
    _min?: BillingAccountMinOrderByAggregateInput
    _sum?: BillingAccountSumOrderByAggregateInput
  }

  export type BillingAccountScalarWhereWithAggregatesInput = {
    AND?: BillingAccountScalarWhereWithAggregatesInput | BillingAccountScalarWhereWithAggregatesInput[]
    OR?: BillingAccountScalarWhereWithAggregatesInput[]
    NOT?: BillingAccountScalarWhereWithAggregatesInput | BillingAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BillingAccount"> | string
    projectId?: StringNullableWithAggregatesFilter<"BillingAccount"> | string | null
    name?: StringWithAggregatesFilter<"BillingAccount"> | string
    description?: StringNullableWithAggregatesFilter<"BillingAccount"> | string | null
    status?: EnumBAStatusWithAggregatesFilter<"BillingAccount"> | $Enums.BAStatus
    startDate?: DateTimeNullableWithAggregatesFilter<"BillingAccount"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"BillingAccount"> | Date | string | null
    budget?: DecimalWithAggregatesFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    markup?: DecimalWithAggregatesFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    clientId?: StringWithAggregatesFilter<"BillingAccount"> | string
    poNumber?: StringNullableWithAggregatesFilter<"BillingAccount"> | string | null
    subscriptionNumber?: StringNullableWithAggregatesFilter<"BillingAccount"> | string | null
    isManualPrize?: BoolWithAggregatesFilter<"BillingAccount"> | boolean
    paymentTerms?: StringNullableWithAggregatesFilter<"BillingAccount"> | string | null
    salesTax?: DecimalNullableWithAggregatesFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string | null
    billable?: BoolWithAggregatesFilter<"BillingAccount"> | boolean
    createdBy?: StringNullableWithAggregatesFilter<"BillingAccount"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BillingAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BillingAccount"> | Date | string
  }

  export type LockedAmountWhereInput = {
    AND?: LockedAmountWhereInput | LockedAmountWhereInput[]
    OR?: LockedAmountWhereInput[]
    NOT?: LockedAmountWhereInput | LockedAmountWhereInput[]
    id?: StringFilter<"LockedAmount"> | string
    billingAccountId?: StringFilter<"LockedAmount"> | string
    challengeId?: StringFilter<"LockedAmount"> | string
    amount?: DecimalFilter<"LockedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"LockedAmount"> | Date | string
    updatedAt?: DateTimeFilter<"LockedAmount"> | Date | string
    billingAccount?: XOR<BillingAccountRelationFilter, BillingAccountWhereInput>
  }

  export type LockedAmountOrderByWithRelationInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingAccount?: BillingAccountOrderByWithRelationInput
  }

  export type LockedAmountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    locked_unique_challenge?: LockedAmountLocked_unique_challengeCompoundUniqueInput
    AND?: LockedAmountWhereInput | LockedAmountWhereInput[]
    OR?: LockedAmountWhereInput[]
    NOT?: LockedAmountWhereInput | LockedAmountWhereInput[]
    billingAccountId?: StringFilter<"LockedAmount"> | string
    challengeId?: StringFilter<"LockedAmount"> | string
    amount?: DecimalFilter<"LockedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"LockedAmount"> | Date | string
    updatedAt?: DateTimeFilter<"LockedAmount"> | Date | string
    billingAccount?: XOR<BillingAccountRelationFilter, BillingAccountWhereInput>
  }, "id" | "locked_unique_challenge">

  export type LockedAmountOrderByWithAggregationInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LockedAmountCountOrderByAggregateInput
    _avg?: LockedAmountAvgOrderByAggregateInput
    _max?: LockedAmountMaxOrderByAggregateInput
    _min?: LockedAmountMinOrderByAggregateInput
    _sum?: LockedAmountSumOrderByAggregateInput
  }

  export type LockedAmountScalarWhereWithAggregatesInput = {
    AND?: LockedAmountScalarWhereWithAggregatesInput | LockedAmountScalarWhereWithAggregatesInput[]
    OR?: LockedAmountScalarWhereWithAggregatesInput[]
    NOT?: LockedAmountScalarWhereWithAggregatesInput | LockedAmountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LockedAmount"> | string
    billingAccountId?: StringWithAggregatesFilter<"LockedAmount"> | string
    challengeId?: StringWithAggregatesFilter<"LockedAmount"> | string
    amount?: DecimalWithAggregatesFilter<"LockedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"LockedAmount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LockedAmount"> | Date | string
  }

  export type ConsumedAmountWhereInput = {
    AND?: ConsumedAmountWhereInput | ConsumedAmountWhereInput[]
    OR?: ConsumedAmountWhereInput[]
    NOT?: ConsumedAmountWhereInput | ConsumedAmountWhereInput[]
    id?: StringFilter<"ConsumedAmount"> | string
    billingAccountId?: StringFilter<"ConsumedAmount"> | string
    challengeId?: StringFilter<"ConsumedAmount"> | string
    amount?: DecimalFilter<"ConsumedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ConsumedAmount"> | Date | string
    updatedAt?: DateTimeFilter<"ConsumedAmount"> | Date | string
    billingAccount?: XOR<BillingAccountRelationFilter, BillingAccountWhereInput>
  }

  export type ConsumedAmountOrderByWithRelationInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingAccount?: BillingAccountOrderByWithRelationInput
  }

  export type ConsumedAmountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    consumed_unique_challenge?: ConsumedAmountConsumed_unique_challengeCompoundUniqueInput
    AND?: ConsumedAmountWhereInput | ConsumedAmountWhereInput[]
    OR?: ConsumedAmountWhereInput[]
    NOT?: ConsumedAmountWhereInput | ConsumedAmountWhereInput[]
    billingAccountId?: StringFilter<"ConsumedAmount"> | string
    challengeId?: StringFilter<"ConsumedAmount"> | string
    amount?: DecimalFilter<"ConsumedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ConsumedAmount"> | Date | string
    updatedAt?: DateTimeFilter<"ConsumedAmount"> | Date | string
    billingAccount?: XOR<BillingAccountRelationFilter, BillingAccountWhereInput>
  }, "id" | "consumed_unique_challenge">

  export type ConsumedAmountOrderByWithAggregationInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsumedAmountCountOrderByAggregateInput
    _avg?: ConsumedAmountAvgOrderByAggregateInput
    _max?: ConsumedAmountMaxOrderByAggregateInput
    _min?: ConsumedAmountMinOrderByAggregateInput
    _sum?: ConsumedAmountSumOrderByAggregateInput
  }

  export type ConsumedAmountScalarWhereWithAggregatesInput = {
    AND?: ConsumedAmountScalarWhereWithAggregatesInput | ConsumedAmountScalarWhereWithAggregatesInput[]
    OR?: ConsumedAmountScalarWhereWithAggregatesInput[]
    NOT?: ConsumedAmountScalarWhereWithAggregatesInput | ConsumedAmountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConsumedAmount"> | string
    billingAccountId?: StringWithAggregatesFilter<"ConsumedAmount"> | string
    challengeId?: StringWithAggregatesFilter<"ConsumedAmount"> | string
    amount?: DecimalWithAggregatesFilter<"ConsumedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"ConsumedAmount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConsumedAmount"> | Date | string
  }

  export type BillingAccountAccessWhereInput = {
    AND?: BillingAccountAccessWhereInput | BillingAccountAccessWhereInput[]
    OR?: BillingAccountAccessWhereInput[]
    NOT?: BillingAccountAccessWhereInput | BillingAccountAccessWhereInput[]
    id?: StringFilter<"BillingAccountAccess"> | string
    billingAccountId?: StringFilter<"BillingAccountAccess"> | string
    userId?: StringFilter<"BillingAccountAccess"> | string
    createdAt?: DateTimeFilter<"BillingAccountAccess"> | Date | string
    billingAccount?: XOR<BillingAccountRelationFilter, BillingAccountWhereInput>
  }

  export type BillingAccountAccessOrderByWithRelationInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    billingAccount?: BillingAccountOrderByWithRelationInput
  }

  export type BillingAccountAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ba_access_unique?: BillingAccountAccessBa_access_uniqueCompoundUniqueInput
    AND?: BillingAccountAccessWhereInput | BillingAccountAccessWhereInput[]
    OR?: BillingAccountAccessWhereInput[]
    NOT?: BillingAccountAccessWhereInput | BillingAccountAccessWhereInput[]
    billingAccountId?: StringFilter<"BillingAccountAccess"> | string
    userId?: StringFilter<"BillingAccountAccess"> | string
    createdAt?: DateTimeFilter<"BillingAccountAccess"> | Date | string
    billingAccount?: XOR<BillingAccountRelationFilter, BillingAccountWhereInput>
  }, "id" | "ba_access_unique">

  export type BillingAccountAccessOrderByWithAggregationInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: BillingAccountAccessCountOrderByAggregateInput
    _max?: BillingAccountAccessMaxOrderByAggregateInput
    _min?: BillingAccountAccessMinOrderByAggregateInput
  }

  export type BillingAccountAccessScalarWhereWithAggregatesInput = {
    AND?: BillingAccountAccessScalarWhereWithAggregatesInput | BillingAccountAccessScalarWhereWithAggregatesInput[]
    OR?: BillingAccountAccessScalarWhereWithAggregatesInput[]
    NOT?: BillingAccountAccessScalarWhereWithAggregatesInput | BillingAccountAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BillingAccountAccess"> | string
    billingAccountId?: StringWithAggregatesFilter<"BillingAccountAccess"> | string
    userId?: StringWithAggregatesFilter<"BillingAccountAccess"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BillingAccountAccess"> | Date | string
  }

  export type ClientCreateInput = {
    id?: string
    name: string
    codeName?: string | null
    status?: $Enums.ClientStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    billingAccounts?: BillingAccountCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    name: string
    codeName?: string | null
    status?: $Enums.ClientStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    billingAccounts?: BillingAccountUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    codeName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumClientStatusFieldUpdateOperationsInput | $Enums.ClientStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingAccounts?: BillingAccountUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    codeName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumClientStatusFieldUpdateOperationsInput | $Enums.ClientStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingAccounts?: BillingAccountUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    name: string
    codeName?: string | null
    status?: $Enums.ClientStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    codeName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumClientStatusFieldUpdateOperationsInput | $Enums.ClientStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    codeName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumClientStatusFieldUpdateOperationsInput | $Enums.ClientStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountCreateInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutBillingAccountsInput
    lockedAmounts?: LockedAmountCreateNestedManyWithoutBillingAccountInput
    consumedAmounts?: ConsumedAmountCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountUncheckedCreateInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    clientId: string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAmounts?: LockedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    consumedAmounts?: ConsumedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessUncheckedCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutBillingAccountsNestedInput
    lockedAmounts?: LockedAmountUpdateManyWithoutBillingAccountNestedInput
    consumedAmounts?: ConsumedAmountUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clientId?: StringFieldUpdateOperationsInput | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAmounts?: LockedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    consumedAmounts?: ConsumedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountCreateManyInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    clientId: string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clientId?: StringFieldUpdateOperationsInput | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountCreateInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    billingAccount: BillingAccountCreateNestedOneWithoutLockedAmountsInput
  }

  export type LockedAmountUncheckedCreateInput = {
    id?: string
    billingAccountId: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LockedAmountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingAccount?: BillingAccountUpdateOneRequiredWithoutLockedAmountsNestedInput
  }

  export type LockedAmountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingAccountId?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountCreateManyInput = {
    id?: string
    billingAccountId: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LockedAmountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingAccountId?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedAmountCreateInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    billingAccount: BillingAccountCreateNestedOneWithoutConsumedAmountsInput
  }

  export type ConsumedAmountUncheckedCreateInput = {
    id?: string
    billingAccountId: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumedAmountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingAccount?: BillingAccountUpdateOneRequiredWithoutConsumedAmountsNestedInput
  }

  export type ConsumedAmountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingAccountId?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedAmountCreateManyInput = {
    id?: string
    billingAccountId: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumedAmountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedAmountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingAccountId?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountAccessCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    billingAccount: BillingAccountCreateNestedOneWithoutAccessGrantsInput
  }

  export type BillingAccountAccessUncheckedCreateInput = {
    id?: string
    billingAccountId: string
    userId: string
    createdAt?: Date | string
  }

  export type BillingAccountAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingAccount?: BillingAccountUpdateOneRequiredWithoutAccessGrantsNestedInput
  }

  export type BillingAccountAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingAccountId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountAccessCreateManyInput = {
    id?: string
    billingAccountId: string
    userId: string
    createdAt?: Date | string
  }

  export type BillingAccountAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingAccountId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumClientStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ClientStatus | EnumClientStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClientStatusFilter<$PrismaModel> | $Enums.ClientStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BillingAccountListRelationFilter = {
    every?: BillingAccountWhereInput
    some?: BillingAccountWhereInput
    none?: BillingAccountWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BillingAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    codeName?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    codeName?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    codeName?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumClientStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClientStatus | EnumClientStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClientStatusWithAggregatesFilter<$PrismaModel> | $Enums.ClientStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClientStatusFilter<$PrismaModel>
    _max?: NestedEnumClientStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumBAStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BAStatus | EnumBAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBAStatusFilter<$PrismaModel> | $Enums.BAStatus
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type LockedAmountListRelationFilter = {
    every?: LockedAmountWhereInput
    some?: LockedAmountWhereInput
    none?: LockedAmountWhereInput
  }

  export type ConsumedAmountListRelationFilter = {
    every?: ConsumedAmountWhereInput
    some?: ConsumedAmountWhereInput
    none?: ConsumedAmountWhereInput
  }

  export type BillingAccountAccessListRelationFilter = {
    every?: BillingAccountAccessWhereInput
    some?: BillingAccountAccessWhereInput
    none?: BillingAccountAccessWhereInput
  }

  export type LockedAmountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsumedAmountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingAccountAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingAccountCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    budget?: SortOrder
    markup?: SortOrder
    clientId?: SortOrder
    poNumber?: SortOrder
    subscriptionNumber?: SortOrder
    isManualPrize?: SortOrder
    paymentTerms?: SortOrder
    salesTax?: SortOrder
    billable?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingAccountAvgOrderByAggregateInput = {
    budget?: SortOrder
    markup?: SortOrder
    salesTax?: SortOrder
  }

  export type BillingAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    budget?: SortOrder
    markup?: SortOrder
    clientId?: SortOrder
    poNumber?: SortOrder
    subscriptionNumber?: SortOrder
    isManualPrize?: SortOrder
    paymentTerms?: SortOrder
    salesTax?: SortOrder
    billable?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingAccountMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    budget?: SortOrder
    markup?: SortOrder
    clientId?: SortOrder
    poNumber?: SortOrder
    subscriptionNumber?: SortOrder
    isManualPrize?: SortOrder
    paymentTerms?: SortOrder
    salesTax?: SortOrder
    billable?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingAccountSumOrderByAggregateInput = {
    budget?: SortOrder
    markup?: SortOrder
    salesTax?: SortOrder
  }

  export type EnumBAStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BAStatus | EnumBAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBAStatusWithAggregatesFilter<$PrismaModel> | $Enums.BAStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBAStatusFilter<$PrismaModel>
    _max?: NestedEnumBAStatusFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BillingAccountRelationFilter = {
    is?: BillingAccountWhereInput
    isNot?: BillingAccountWhereInput
  }

  export type LockedAmountLocked_unique_challengeCompoundUniqueInput = {
    billingAccountId: string
    challengeId: string
  }

  export type LockedAmountCountOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LockedAmountAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type LockedAmountMaxOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LockedAmountMinOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LockedAmountSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ConsumedAmountConsumed_unique_challengeCompoundUniqueInput = {
    billingAccountId: string
    challengeId: string
  }

  export type ConsumedAmountCountOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumedAmountAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ConsumedAmountMaxOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumedAmountMinOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    challengeId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumedAmountSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BillingAccountAccessBa_access_uniqueCompoundUniqueInput = {
    billingAccountId: string
    userId: string
  }

  export type BillingAccountAccessCountOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BillingAccountAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BillingAccountAccessMinOrderByAggregateInput = {
    id?: SortOrder
    billingAccountId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BillingAccountCreateNestedManyWithoutClientInput = {
    create?: XOR<BillingAccountCreateWithoutClientInput, BillingAccountUncheckedCreateWithoutClientInput> | BillingAccountCreateWithoutClientInput[] | BillingAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BillingAccountCreateOrConnectWithoutClientInput | BillingAccountCreateOrConnectWithoutClientInput[]
    createMany?: BillingAccountCreateManyClientInputEnvelope
    connect?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
  }

  export type BillingAccountUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<BillingAccountCreateWithoutClientInput, BillingAccountUncheckedCreateWithoutClientInput> | BillingAccountCreateWithoutClientInput[] | BillingAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BillingAccountCreateOrConnectWithoutClientInput | BillingAccountCreateOrConnectWithoutClientInput[]
    createMany?: BillingAccountCreateManyClientInputEnvelope
    connect?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumClientStatusFieldUpdateOperationsInput = {
    set?: $Enums.ClientStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BillingAccountUpdateManyWithoutClientNestedInput = {
    create?: XOR<BillingAccountCreateWithoutClientInput, BillingAccountUncheckedCreateWithoutClientInput> | BillingAccountCreateWithoutClientInput[] | BillingAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BillingAccountCreateOrConnectWithoutClientInput | BillingAccountCreateOrConnectWithoutClientInput[]
    upsert?: BillingAccountUpsertWithWhereUniqueWithoutClientInput | BillingAccountUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: BillingAccountCreateManyClientInputEnvelope
    set?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    disconnect?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    delete?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    connect?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    update?: BillingAccountUpdateWithWhereUniqueWithoutClientInput | BillingAccountUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: BillingAccountUpdateManyWithWhereWithoutClientInput | BillingAccountUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: BillingAccountScalarWhereInput | BillingAccountScalarWhereInput[]
  }

  export type BillingAccountUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<BillingAccountCreateWithoutClientInput, BillingAccountUncheckedCreateWithoutClientInput> | BillingAccountCreateWithoutClientInput[] | BillingAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BillingAccountCreateOrConnectWithoutClientInput | BillingAccountCreateOrConnectWithoutClientInput[]
    upsert?: BillingAccountUpsertWithWhereUniqueWithoutClientInput | BillingAccountUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: BillingAccountCreateManyClientInputEnvelope
    set?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    disconnect?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    delete?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    connect?: BillingAccountWhereUniqueInput | BillingAccountWhereUniqueInput[]
    update?: BillingAccountUpdateWithWhereUniqueWithoutClientInput | BillingAccountUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: BillingAccountUpdateManyWithWhereWithoutClientInput | BillingAccountUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: BillingAccountScalarWhereInput | BillingAccountScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutBillingAccountsInput = {
    create?: XOR<ClientCreateWithoutBillingAccountsInput, ClientUncheckedCreateWithoutBillingAccountsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutBillingAccountsInput
    connect?: ClientWhereUniqueInput
  }

  export type LockedAmountCreateNestedManyWithoutBillingAccountInput = {
    create?: XOR<LockedAmountCreateWithoutBillingAccountInput, LockedAmountUncheckedCreateWithoutBillingAccountInput> | LockedAmountCreateWithoutBillingAccountInput[] | LockedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: LockedAmountCreateOrConnectWithoutBillingAccountInput | LockedAmountCreateOrConnectWithoutBillingAccountInput[]
    createMany?: LockedAmountCreateManyBillingAccountInputEnvelope
    connect?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
  }

  export type ConsumedAmountCreateNestedManyWithoutBillingAccountInput = {
    create?: XOR<ConsumedAmountCreateWithoutBillingAccountInput, ConsumedAmountUncheckedCreateWithoutBillingAccountInput> | ConsumedAmountCreateWithoutBillingAccountInput[] | ConsumedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: ConsumedAmountCreateOrConnectWithoutBillingAccountInput | ConsumedAmountCreateOrConnectWithoutBillingAccountInput[]
    createMany?: ConsumedAmountCreateManyBillingAccountInputEnvelope
    connect?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
  }

  export type BillingAccountAccessCreateNestedManyWithoutBillingAccountInput = {
    create?: XOR<BillingAccountAccessCreateWithoutBillingAccountInput, BillingAccountAccessUncheckedCreateWithoutBillingAccountInput> | BillingAccountAccessCreateWithoutBillingAccountInput[] | BillingAccountAccessUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: BillingAccountAccessCreateOrConnectWithoutBillingAccountInput | BillingAccountAccessCreateOrConnectWithoutBillingAccountInput[]
    createMany?: BillingAccountAccessCreateManyBillingAccountInputEnvelope
    connect?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
  }

  export type LockedAmountUncheckedCreateNestedManyWithoutBillingAccountInput = {
    create?: XOR<LockedAmountCreateWithoutBillingAccountInput, LockedAmountUncheckedCreateWithoutBillingAccountInput> | LockedAmountCreateWithoutBillingAccountInput[] | LockedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: LockedAmountCreateOrConnectWithoutBillingAccountInput | LockedAmountCreateOrConnectWithoutBillingAccountInput[]
    createMany?: LockedAmountCreateManyBillingAccountInputEnvelope
    connect?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
  }

  export type ConsumedAmountUncheckedCreateNestedManyWithoutBillingAccountInput = {
    create?: XOR<ConsumedAmountCreateWithoutBillingAccountInput, ConsumedAmountUncheckedCreateWithoutBillingAccountInput> | ConsumedAmountCreateWithoutBillingAccountInput[] | ConsumedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: ConsumedAmountCreateOrConnectWithoutBillingAccountInput | ConsumedAmountCreateOrConnectWithoutBillingAccountInput[]
    createMany?: ConsumedAmountCreateManyBillingAccountInputEnvelope
    connect?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
  }

  export type BillingAccountAccessUncheckedCreateNestedManyWithoutBillingAccountInput = {
    create?: XOR<BillingAccountAccessCreateWithoutBillingAccountInput, BillingAccountAccessUncheckedCreateWithoutBillingAccountInput> | BillingAccountAccessCreateWithoutBillingAccountInput[] | BillingAccountAccessUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: BillingAccountAccessCreateOrConnectWithoutBillingAccountInput | BillingAccountAccessCreateOrConnectWithoutBillingAccountInput[]
    createMany?: BillingAccountAccessCreateManyBillingAccountInputEnvelope
    connect?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
  }

  export type EnumBAStatusFieldUpdateOperationsInput = {
    set?: $Enums.BAStatus
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ClientUpdateOneRequiredWithoutBillingAccountsNestedInput = {
    create?: XOR<ClientCreateWithoutBillingAccountsInput, ClientUncheckedCreateWithoutBillingAccountsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutBillingAccountsInput
    upsert?: ClientUpsertWithoutBillingAccountsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutBillingAccountsInput, ClientUpdateWithoutBillingAccountsInput>, ClientUncheckedUpdateWithoutBillingAccountsInput>
  }

  export type LockedAmountUpdateManyWithoutBillingAccountNestedInput = {
    create?: XOR<LockedAmountCreateWithoutBillingAccountInput, LockedAmountUncheckedCreateWithoutBillingAccountInput> | LockedAmountCreateWithoutBillingAccountInput[] | LockedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: LockedAmountCreateOrConnectWithoutBillingAccountInput | LockedAmountCreateOrConnectWithoutBillingAccountInput[]
    upsert?: LockedAmountUpsertWithWhereUniqueWithoutBillingAccountInput | LockedAmountUpsertWithWhereUniqueWithoutBillingAccountInput[]
    createMany?: LockedAmountCreateManyBillingAccountInputEnvelope
    set?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    disconnect?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    delete?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    connect?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    update?: LockedAmountUpdateWithWhereUniqueWithoutBillingAccountInput | LockedAmountUpdateWithWhereUniqueWithoutBillingAccountInput[]
    updateMany?: LockedAmountUpdateManyWithWhereWithoutBillingAccountInput | LockedAmountUpdateManyWithWhereWithoutBillingAccountInput[]
    deleteMany?: LockedAmountScalarWhereInput | LockedAmountScalarWhereInput[]
  }

  export type ConsumedAmountUpdateManyWithoutBillingAccountNestedInput = {
    create?: XOR<ConsumedAmountCreateWithoutBillingAccountInput, ConsumedAmountUncheckedCreateWithoutBillingAccountInput> | ConsumedAmountCreateWithoutBillingAccountInput[] | ConsumedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: ConsumedAmountCreateOrConnectWithoutBillingAccountInput | ConsumedAmountCreateOrConnectWithoutBillingAccountInput[]
    upsert?: ConsumedAmountUpsertWithWhereUniqueWithoutBillingAccountInput | ConsumedAmountUpsertWithWhereUniqueWithoutBillingAccountInput[]
    createMany?: ConsumedAmountCreateManyBillingAccountInputEnvelope
    set?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    disconnect?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    delete?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    connect?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    update?: ConsumedAmountUpdateWithWhereUniqueWithoutBillingAccountInput | ConsumedAmountUpdateWithWhereUniqueWithoutBillingAccountInput[]
    updateMany?: ConsumedAmountUpdateManyWithWhereWithoutBillingAccountInput | ConsumedAmountUpdateManyWithWhereWithoutBillingAccountInput[]
    deleteMany?: ConsumedAmountScalarWhereInput | ConsumedAmountScalarWhereInput[]
  }

  export type BillingAccountAccessUpdateManyWithoutBillingAccountNestedInput = {
    create?: XOR<BillingAccountAccessCreateWithoutBillingAccountInput, BillingAccountAccessUncheckedCreateWithoutBillingAccountInput> | BillingAccountAccessCreateWithoutBillingAccountInput[] | BillingAccountAccessUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: BillingAccountAccessCreateOrConnectWithoutBillingAccountInput | BillingAccountAccessCreateOrConnectWithoutBillingAccountInput[]
    upsert?: BillingAccountAccessUpsertWithWhereUniqueWithoutBillingAccountInput | BillingAccountAccessUpsertWithWhereUniqueWithoutBillingAccountInput[]
    createMany?: BillingAccountAccessCreateManyBillingAccountInputEnvelope
    set?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    disconnect?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    delete?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    connect?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    update?: BillingAccountAccessUpdateWithWhereUniqueWithoutBillingAccountInput | BillingAccountAccessUpdateWithWhereUniqueWithoutBillingAccountInput[]
    updateMany?: BillingAccountAccessUpdateManyWithWhereWithoutBillingAccountInput | BillingAccountAccessUpdateManyWithWhereWithoutBillingAccountInput[]
    deleteMany?: BillingAccountAccessScalarWhereInput | BillingAccountAccessScalarWhereInput[]
  }

  export type LockedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput = {
    create?: XOR<LockedAmountCreateWithoutBillingAccountInput, LockedAmountUncheckedCreateWithoutBillingAccountInput> | LockedAmountCreateWithoutBillingAccountInput[] | LockedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: LockedAmountCreateOrConnectWithoutBillingAccountInput | LockedAmountCreateOrConnectWithoutBillingAccountInput[]
    upsert?: LockedAmountUpsertWithWhereUniqueWithoutBillingAccountInput | LockedAmountUpsertWithWhereUniqueWithoutBillingAccountInput[]
    createMany?: LockedAmountCreateManyBillingAccountInputEnvelope
    set?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    disconnect?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    delete?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    connect?: LockedAmountWhereUniqueInput | LockedAmountWhereUniqueInput[]
    update?: LockedAmountUpdateWithWhereUniqueWithoutBillingAccountInput | LockedAmountUpdateWithWhereUniqueWithoutBillingAccountInput[]
    updateMany?: LockedAmountUpdateManyWithWhereWithoutBillingAccountInput | LockedAmountUpdateManyWithWhereWithoutBillingAccountInput[]
    deleteMany?: LockedAmountScalarWhereInput | LockedAmountScalarWhereInput[]
  }

  export type ConsumedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput = {
    create?: XOR<ConsumedAmountCreateWithoutBillingAccountInput, ConsumedAmountUncheckedCreateWithoutBillingAccountInput> | ConsumedAmountCreateWithoutBillingAccountInput[] | ConsumedAmountUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: ConsumedAmountCreateOrConnectWithoutBillingAccountInput | ConsumedAmountCreateOrConnectWithoutBillingAccountInput[]
    upsert?: ConsumedAmountUpsertWithWhereUniqueWithoutBillingAccountInput | ConsumedAmountUpsertWithWhereUniqueWithoutBillingAccountInput[]
    createMany?: ConsumedAmountCreateManyBillingAccountInputEnvelope
    set?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    disconnect?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    delete?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    connect?: ConsumedAmountWhereUniqueInput | ConsumedAmountWhereUniqueInput[]
    update?: ConsumedAmountUpdateWithWhereUniqueWithoutBillingAccountInput | ConsumedAmountUpdateWithWhereUniqueWithoutBillingAccountInput[]
    updateMany?: ConsumedAmountUpdateManyWithWhereWithoutBillingAccountInput | ConsumedAmountUpdateManyWithWhereWithoutBillingAccountInput[]
    deleteMany?: ConsumedAmountScalarWhereInput | ConsumedAmountScalarWhereInput[]
  }

  export type BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountNestedInput = {
    create?: XOR<BillingAccountAccessCreateWithoutBillingAccountInput, BillingAccountAccessUncheckedCreateWithoutBillingAccountInput> | BillingAccountAccessCreateWithoutBillingAccountInput[] | BillingAccountAccessUncheckedCreateWithoutBillingAccountInput[]
    connectOrCreate?: BillingAccountAccessCreateOrConnectWithoutBillingAccountInput | BillingAccountAccessCreateOrConnectWithoutBillingAccountInput[]
    upsert?: BillingAccountAccessUpsertWithWhereUniqueWithoutBillingAccountInput | BillingAccountAccessUpsertWithWhereUniqueWithoutBillingAccountInput[]
    createMany?: BillingAccountAccessCreateManyBillingAccountInputEnvelope
    set?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    disconnect?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    delete?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    connect?: BillingAccountAccessWhereUniqueInput | BillingAccountAccessWhereUniqueInput[]
    update?: BillingAccountAccessUpdateWithWhereUniqueWithoutBillingAccountInput | BillingAccountAccessUpdateWithWhereUniqueWithoutBillingAccountInput[]
    updateMany?: BillingAccountAccessUpdateManyWithWhereWithoutBillingAccountInput | BillingAccountAccessUpdateManyWithWhereWithoutBillingAccountInput[]
    deleteMany?: BillingAccountAccessScalarWhereInput | BillingAccountAccessScalarWhereInput[]
  }

  export type BillingAccountCreateNestedOneWithoutLockedAmountsInput = {
    create?: XOR<BillingAccountCreateWithoutLockedAmountsInput, BillingAccountUncheckedCreateWithoutLockedAmountsInput>
    connectOrCreate?: BillingAccountCreateOrConnectWithoutLockedAmountsInput
    connect?: BillingAccountWhereUniqueInput
  }

  export type BillingAccountUpdateOneRequiredWithoutLockedAmountsNestedInput = {
    create?: XOR<BillingAccountCreateWithoutLockedAmountsInput, BillingAccountUncheckedCreateWithoutLockedAmountsInput>
    connectOrCreate?: BillingAccountCreateOrConnectWithoutLockedAmountsInput
    upsert?: BillingAccountUpsertWithoutLockedAmountsInput
    connect?: BillingAccountWhereUniqueInput
    update?: XOR<XOR<BillingAccountUpdateToOneWithWhereWithoutLockedAmountsInput, BillingAccountUpdateWithoutLockedAmountsInput>, BillingAccountUncheckedUpdateWithoutLockedAmountsInput>
  }

  export type BillingAccountCreateNestedOneWithoutConsumedAmountsInput = {
    create?: XOR<BillingAccountCreateWithoutConsumedAmountsInput, BillingAccountUncheckedCreateWithoutConsumedAmountsInput>
    connectOrCreate?: BillingAccountCreateOrConnectWithoutConsumedAmountsInput
    connect?: BillingAccountWhereUniqueInput
  }

  export type BillingAccountUpdateOneRequiredWithoutConsumedAmountsNestedInput = {
    create?: XOR<BillingAccountCreateWithoutConsumedAmountsInput, BillingAccountUncheckedCreateWithoutConsumedAmountsInput>
    connectOrCreate?: BillingAccountCreateOrConnectWithoutConsumedAmountsInput
    upsert?: BillingAccountUpsertWithoutConsumedAmountsInput
    connect?: BillingAccountWhereUniqueInput
    update?: XOR<XOR<BillingAccountUpdateToOneWithWhereWithoutConsumedAmountsInput, BillingAccountUpdateWithoutConsumedAmountsInput>, BillingAccountUncheckedUpdateWithoutConsumedAmountsInput>
  }

  export type BillingAccountCreateNestedOneWithoutAccessGrantsInput = {
    create?: XOR<BillingAccountCreateWithoutAccessGrantsInput, BillingAccountUncheckedCreateWithoutAccessGrantsInput>
    connectOrCreate?: BillingAccountCreateOrConnectWithoutAccessGrantsInput
    connect?: BillingAccountWhereUniqueInput
  }

  export type BillingAccountUpdateOneRequiredWithoutAccessGrantsNestedInput = {
    create?: XOR<BillingAccountCreateWithoutAccessGrantsInput, BillingAccountUncheckedCreateWithoutAccessGrantsInput>
    connectOrCreate?: BillingAccountCreateOrConnectWithoutAccessGrantsInput
    upsert?: BillingAccountUpsertWithoutAccessGrantsInput
    connect?: BillingAccountWhereUniqueInput
    update?: XOR<XOR<BillingAccountUpdateToOneWithWhereWithoutAccessGrantsInput, BillingAccountUpdateWithoutAccessGrantsInput>, BillingAccountUncheckedUpdateWithoutAccessGrantsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumClientStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ClientStatus | EnumClientStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClientStatusFilter<$PrismaModel> | $Enums.ClientStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumClientStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClientStatus | EnumClientStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClientStatus[] | ListEnumClientStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClientStatusWithAggregatesFilter<$PrismaModel> | $Enums.ClientStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClientStatusFilter<$PrismaModel>
    _max?: NestedEnumClientStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumBAStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BAStatus | EnumBAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBAStatusFilter<$PrismaModel> | $Enums.BAStatus
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumBAStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BAStatus | EnumBAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BAStatus[] | ListEnumBAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBAStatusWithAggregatesFilter<$PrismaModel> | $Enums.BAStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBAStatusFilter<$PrismaModel>
    _max?: NestedEnumBAStatusFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BillingAccountCreateWithoutClientInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAmounts?: LockedAmountCreateNestedManyWithoutBillingAccountInput
    consumedAmounts?: ConsumedAmountCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountUncheckedCreateWithoutClientInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAmounts?: LockedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    consumedAmounts?: ConsumedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessUncheckedCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountCreateOrConnectWithoutClientInput = {
    where: BillingAccountWhereUniqueInput
    create: XOR<BillingAccountCreateWithoutClientInput, BillingAccountUncheckedCreateWithoutClientInput>
  }

  export type BillingAccountCreateManyClientInputEnvelope = {
    data: BillingAccountCreateManyClientInput | BillingAccountCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type BillingAccountUpsertWithWhereUniqueWithoutClientInput = {
    where: BillingAccountWhereUniqueInput
    update: XOR<BillingAccountUpdateWithoutClientInput, BillingAccountUncheckedUpdateWithoutClientInput>
    create: XOR<BillingAccountCreateWithoutClientInput, BillingAccountUncheckedCreateWithoutClientInput>
  }

  export type BillingAccountUpdateWithWhereUniqueWithoutClientInput = {
    where: BillingAccountWhereUniqueInput
    data: XOR<BillingAccountUpdateWithoutClientInput, BillingAccountUncheckedUpdateWithoutClientInput>
  }

  export type BillingAccountUpdateManyWithWhereWithoutClientInput = {
    where: BillingAccountScalarWhereInput
    data: XOR<BillingAccountUpdateManyMutationInput, BillingAccountUncheckedUpdateManyWithoutClientInput>
  }

  export type BillingAccountScalarWhereInput = {
    AND?: BillingAccountScalarWhereInput | BillingAccountScalarWhereInput[]
    OR?: BillingAccountScalarWhereInput[]
    NOT?: BillingAccountScalarWhereInput | BillingAccountScalarWhereInput[]
    id?: StringFilter<"BillingAccount"> | string
    projectId?: StringNullableFilter<"BillingAccount"> | string | null
    name?: StringFilter<"BillingAccount"> | string
    description?: StringNullableFilter<"BillingAccount"> | string | null
    status?: EnumBAStatusFilter<"BillingAccount"> | $Enums.BAStatus
    startDate?: DateTimeNullableFilter<"BillingAccount"> | Date | string | null
    endDate?: DateTimeNullableFilter<"BillingAccount"> | Date | string | null
    budget?: DecimalFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    markup?: DecimalFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string
    clientId?: StringFilter<"BillingAccount"> | string
    poNumber?: StringNullableFilter<"BillingAccount"> | string | null
    subscriptionNumber?: StringNullableFilter<"BillingAccount"> | string | null
    isManualPrize?: BoolFilter<"BillingAccount"> | boolean
    paymentTerms?: StringNullableFilter<"BillingAccount"> | string | null
    salesTax?: DecimalNullableFilter<"BillingAccount"> | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFilter<"BillingAccount"> | boolean
    createdBy?: StringNullableFilter<"BillingAccount"> | string | null
    createdAt?: DateTimeFilter<"BillingAccount"> | Date | string
    updatedAt?: DateTimeFilter<"BillingAccount"> | Date | string
  }

  export type ClientCreateWithoutBillingAccountsInput = {
    id?: string
    name: string
    codeName?: string | null
    status?: $Enums.ClientStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUncheckedCreateWithoutBillingAccountsInput = {
    id?: string
    name: string
    codeName?: string | null
    status?: $Enums.ClientStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientCreateOrConnectWithoutBillingAccountsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutBillingAccountsInput, ClientUncheckedCreateWithoutBillingAccountsInput>
  }

  export type LockedAmountCreateWithoutBillingAccountInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LockedAmountUncheckedCreateWithoutBillingAccountInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LockedAmountCreateOrConnectWithoutBillingAccountInput = {
    where: LockedAmountWhereUniqueInput
    create: XOR<LockedAmountCreateWithoutBillingAccountInput, LockedAmountUncheckedCreateWithoutBillingAccountInput>
  }

  export type LockedAmountCreateManyBillingAccountInputEnvelope = {
    data: LockedAmountCreateManyBillingAccountInput | LockedAmountCreateManyBillingAccountInput[]
    skipDuplicates?: boolean
  }

  export type ConsumedAmountCreateWithoutBillingAccountInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumedAmountUncheckedCreateWithoutBillingAccountInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumedAmountCreateOrConnectWithoutBillingAccountInput = {
    where: ConsumedAmountWhereUniqueInput
    create: XOR<ConsumedAmountCreateWithoutBillingAccountInput, ConsumedAmountUncheckedCreateWithoutBillingAccountInput>
  }

  export type ConsumedAmountCreateManyBillingAccountInputEnvelope = {
    data: ConsumedAmountCreateManyBillingAccountInput | ConsumedAmountCreateManyBillingAccountInput[]
    skipDuplicates?: boolean
  }

  export type BillingAccountAccessCreateWithoutBillingAccountInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type BillingAccountAccessUncheckedCreateWithoutBillingAccountInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type BillingAccountAccessCreateOrConnectWithoutBillingAccountInput = {
    where: BillingAccountAccessWhereUniqueInput
    create: XOR<BillingAccountAccessCreateWithoutBillingAccountInput, BillingAccountAccessUncheckedCreateWithoutBillingAccountInput>
  }

  export type BillingAccountAccessCreateManyBillingAccountInputEnvelope = {
    data: BillingAccountAccessCreateManyBillingAccountInput | BillingAccountAccessCreateManyBillingAccountInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutBillingAccountsInput = {
    update: XOR<ClientUpdateWithoutBillingAccountsInput, ClientUncheckedUpdateWithoutBillingAccountsInput>
    create: XOR<ClientCreateWithoutBillingAccountsInput, ClientUncheckedCreateWithoutBillingAccountsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutBillingAccountsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutBillingAccountsInput, ClientUncheckedUpdateWithoutBillingAccountsInput>
  }

  export type ClientUpdateWithoutBillingAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    codeName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumClientStatusFieldUpdateOperationsInput | $Enums.ClientStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateWithoutBillingAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    codeName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumClientStatusFieldUpdateOperationsInput | $Enums.ClientStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountUpsertWithWhereUniqueWithoutBillingAccountInput = {
    where: LockedAmountWhereUniqueInput
    update: XOR<LockedAmountUpdateWithoutBillingAccountInput, LockedAmountUncheckedUpdateWithoutBillingAccountInput>
    create: XOR<LockedAmountCreateWithoutBillingAccountInput, LockedAmountUncheckedCreateWithoutBillingAccountInput>
  }

  export type LockedAmountUpdateWithWhereUniqueWithoutBillingAccountInput = {
    where: LockedAmountWhereUniqueInput
    data: XOR<LockedAmountUpdateWithoutBillingAccountInput, LockedAmountUncheckedUpdateWithoutBillingAccountInput>
  }

  export type LockedAmountUpdateManyWithWhereWithoutBillingAccountInput = {
    where: LockedAmountScalarWhereInput
    data: XOR<LockedAmountUpdateManyMutationInput, LockedAmountUncheckedUpdateManyWithoutBillingAccountInput>
  }

  export type LockedAmountScalarWhereInput = {
    AND?: LockedAmountScalarWhereInput | LockedAmountScalarWhereInput[]
    OR?: LockedAmountScalarWhereInput[]
    NOT?: LockedAmountScalarWhereInput | LockedAmountScalarWhereInput[]
    id?: StringFilter<"LockedAmount"> | string
    billingAccountId?: StringFilter<"LockedAmount"> | string
    challengeId?: StringFilter<"LockedAmount"> | string
    amount?: DecimalFilter<"LockedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"LockedAmount"> | Date | string
    updatedAt?: DateTimeFilter<"LockedAmount"> | Date | string
  }

  export type ConsumedAmountUpsertWithWhereUniqueWithoutBillingAccountInput = {
    where: ConsumedAmountWhereUniqueInput
    update: XOR<ConsumedAmountUpdateWithoutBillingAccountInput, ConsumedAmountUncheckedUpdateWithoutBillingAccountInput>
    create: XOR<ConsumedAmountCreateWithoutBillingAccountInput, ConsumedAmountUncheckedCreateWithoutBillingAccountInput>
  }

  export type ConsumedAmountUpdateWithWhereUniqueWithoutBillingAccountInput = {
    where: ConsumedAmountWhereUniqueInput
    data: XOR<ConsumedAmountUpdateWithoutBillingAccountInput, ConsumedAmountUncheckedUpdateWithoutBillingAccountInput>
  }

  export type ConsumedAmountUpdateManyWithWhereWithoutBillingAccountInput = {
    where: ConsumedAmountScalarWhereInput
    data: XOR<ConsumedAmountUpdateManyMutationInput, ConsumedAmountUncheckedUpdateManyWithoutBillingAccountInput>
  }

  export type ConsumedAmountScalarWhereInput = {
    AND?: ConsumedAmountScalarWhereInput | ConsumedAmountScalarWhereInput[]
    OR?: ConsumedAmountScalarWhereInput[]
    NOT?: ConsumedAmountScalarWhereInput | ConsumedAmountScalarWhereInput[]
    id?: StringFilter<"ConsumedAmount"> | string
    billingAccountId?: StringFilter<"ConsumedAmount"> | string
    challengeId?: StringFilter<"ConsumedAmount"> | string
    amount?: DecimalFilter<"ConsumedAmount"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ConsumedAmount"> | Date | string
    updatedAt?: DateTimeFilter<"ConsumedAmount"> | Date | string
  }

  export type BillingAccountAccessUpsertWithWhereUniqueWithoutBillingAccountInput = {
    where: BillingAccountAccessWhereUniqueInput
    update: XOR<BillingAccountAccessUpdateWithoutBillingAccountInput, BillingAccountAccessUncheckedUpdateWithoutBillingAccountInput>
    create: XOR<BillingAccountAccessCreateWithoutBillingAccountInput, BillingAccountAccessUncheckedCreateWithoutBillingAccountInput>
  }

  export type BillingAccountAccessUpdateWithWhereUniqueWithoutBillingAccountInput = {
    where: BillingAccountAccessWhereUniqueInput
    data: XOR<BillingAccountAccessUpdateWithoutBillingAccountInput, BillingAccountAccessUncheckedUpdateWithoutBillingAccountInput>
  }

  export type BillingAccountAccessUpdateManyWithWhereWithoutBillingAccountInput = {
    where: BillingAccountAccessScalarWhereInput
    data: XOR<BillingAccountAccessUpdateManyMutationInput, BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountInput>
  }

  export type BillingAccountAccessScalarWhereInput = {
    AND?: BillingAccountAccessScalarWhereInput | BillingAccountAccessScalarWhereInput[]
    OR?: BillingAccountAccessScalarWhereInput[]
    NOT?: BillingAccountAccessScalarWhereInput | BillingAccountAccessScalarWhereInput[]
    id?: StringFilter<"BillingAccountAccess"> | string
    billingAccountId?: StringFilter<"BillingAccountAccess"> | string
    userId?: StringFilter<"BillingAccountAccess"> | string
    createdAt?: DateTimeFilter<"BillingAccountAccess"> | Date | string
  }

  export type BillingAccountCreateWithoutLockedAmountsInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutBillingAccountsInput
    consumedAmounts?: ConsumedAmountCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountUncheckedCreateWithoutLockedAmountsInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    clientId: string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumedAmounts?: ConsumedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessUncheckedCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountCreateOrConnectWithoutLockedAmountsInput = {
    where: BillingAccountWhereUniqueInput
    create: XOR<BillingAccountCreateWithoutLockedAmountsInput, BillingAccountUncheckedCreateWithoutLockedAmountsInput>
  }

  export type BillingAccountUpsertWithoutLockedAmountsInput = {
    update: XOR<BillingAccountUpdateWithoutLockedAmountsInput, BillingAccountUncheckedUpdateWithoutLockedAmountsInput>
    create: XOR<BillingAccountCreateWithoutLockedAmountsInput, BillingAccountUncheckedCreateWithoutLockedAmountsInput>
    where?: BillingAccountWhereInput
  }

  export type BillingAccountUpdateToOneWithWhereWithoutLockedAmountsInput = {
    where?: BillingAccountWhereInput
    data: XOR<BillingAccountUpdateWithoutLockedAmountsInput, BillingAccountUncheckedUpdateWithoutLockedAmountsInput>
  }

  export type BillingAccountUpdateWithoutLockedAmountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutBillingAccountsNestedInput
    consumedAmounts?: ConsumedAmountUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountUncheckedUpdateWithoutLockedAmountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clientId?: StringFieldUpdateOperationsInput | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumedAmounts?: ConsumedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountCreateWithoutConsumedAmountsInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutBillingAccountsInput
    lockedAmounts?: LockedAmountCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountUncheckedCreateWithoutConsumedAmountsInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    clientId: string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAmounts?: LockedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    accessGrants?: BillingAccountAccessUncheckedCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountCreateOrConnectWithoutConsumedAmountsInput = {
    where: BillingAccountWhereUniqueInput
    create: XOR<BillingAccountCreateWithoutConsumedAmountsInput, BillingAccountUncheckedCreateWithoutConsumedAmountsInput>
  }

  export type BillingAccountUpsertWithoutConsumedAmountsInput = {
    update: XOR<BillingAccountUpdateWithoutConsumedAmountsInput, BillingAccountUncheckedUpdateWithoutConsumedAmountsInput>
    create: XOR<BillingAccountCreateWithoutConsumedAmountsInput, BillingAccountUncheckedCreateWithoutConsumedAmountsInput>
    where?: BillingAccountWhereInput
  }

  export type BillingAccountUpdateToOneWithWhereWithoutConsumedAmountsInput = {
    where?: BillingAccountWhereInput
    data: XOR<BillingAccountUpdateWithoutConsumedAmountsInput, BillingAccountUncheckedUpdateWithoutConsumedAmountsInput>
  }

  export type BillingAccountUpdateWithoutConsumedAmountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutBillingAccountsNestedInput
    lockedAmounts?: LockedAmountUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountUncheckedUpdateWithoutConsumedAmountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clientId?: StringFieldUpdateOperationsInput | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAmounts?: LockedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountCreateWithoutAccessGrantsInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutBillingAccountsInput
    lockedAmounts?: LockedAmountCreateNestedManyWithoutBillingAccountInput
    consumedAmounts?: ConsumedAmountCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountUncheckedCreateWithoutAccessGrantsInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    clientId: string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAmounts?: LockedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
    consumedAmounts?: ConsumedAmountUncheckedCreateNestedManyWithoutBillingAccountInput
  }

  export type BillingAccountCreateOrConnectWithoutAccessGrantsInput = {
    where: BillingAccountWhereUniqueInput
    create: XOR<BillingAccountCreateWithoutAccessGrantsInput, BillingAccountUncheckedCreateWithoutAccessGrantsInput>
  }

  export type BillingAccountUpsertWithoutAccessGrantsInput = {
    update: XOR<BillingAccountUpdateWithoutAccessGrantsInput, BillingAccountUncheckedUpdateWithoutAccessGrantsInput>
    create: XOR<BillingAccountCreateWithoutAccessGrantsInput, BillingAccountUncheckedCreateWithoutAccessGrantsInput>
    where?: BillingAccountWhereInput
  }

  export type BillingAccountUpdateToOneWithWhereWithoutAccessGrantsInput = {
    where?: BillingAccountWhereInput
    data: XOR<BillingAccountUpdateWithoutAccessGrantsInput, BillingAccountUncheckedUpdateWithoutAccessGrantsInput>
  }

  export type BillingAccountUpdateWithoutAccessGrantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutBillingAccountsNestedInput
    lockedAmounts?: LockedAmountUpdateManyWithoutBillingAccountNestedInput
    consumedAmounts?: ConsumedAmountUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountUncheckedUpdateWithoutAccessGrantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clientId?: StringFieldUpdateOperationsInput | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAmounts?: LockedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    consumedAmounts?: ConsumedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountCreateManyClientInput = {
    id?: string
    projectId?: string | null
    name: string
    description?: string | null
    status?: $Enums.BAStatus
    startDate?: Date | string | null
    endDate?: Date | string | null
    budget: Decimal | DecimalJsLike | number | string
    markup: Decimal | DecimalJsLike | number | string
    poNumber?: string | null
    subscriptionNumber?: string | null
    isManualPrize?: boolean
    paymentTerms?: string | null
    salesTax?: Decimal | DecimalJsLike | number | string | null
    billable?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingAccountUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAmounts?: LockedAmountUpdateManyWithoutBillingAccountNestedInput
    consumedAmounts?: ConsumedAmountUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAmounts?: LockedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    consumedAmounts?: ConsumedAmountUncheckedUpdateManyWithoutBillingAccountNestedInput
    accessGrants?: BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountNestedInput
  }

  export type BillingAccountUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBAStatusFieldUpdateOperationsInput | $Enums.BAStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    markup?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    poNumber?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isManualPrize?: BoolFieldUpdateOperationsInput | boolean
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    salesTax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    billable?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountCreateManyBillingAccountInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumedAmountCreateManyBillingAccountInput = {
    id?: string
    challengeId: string
    amount: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingAccountAccessCreateManyBillingAccountInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LockedAmountUpdateWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountUncheckedUpdateWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LockedAmountUncheckedUpdateManyWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedAmountUpdateWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedAmountUncheckedUpdateWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumedAmountUncheckedUpdateManyWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    challengeId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountAccessUpdateWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountAccessUncheckedUpdateWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingAccountAccessUncheckedUpdateManyWithoutBillingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingAccountCountOutputTypeDefaultArgs instead
     */
    export type BillingAccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingAccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingAccountDefaultArgs instead
     */
    export type BillingAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingAccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LockedAmountDefaultArgs instead
     */
    export type LockedAmountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LockedAmountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsumedAmountDefaultArgs instead
     */
    export type ConsumedAmountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsumedAmountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingAccountAccessDefaultArgs instead
     */
    export type BillingAccountAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingAccountAccessDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}